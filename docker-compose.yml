version: '3.9'

services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Настройки для внешнего доступа
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5432:5432"  # Порт для внешнего доступа
    volumes:
      - pgdata:/var/lib/postgresql/data
      # Конфигурация PostgreSQL для внешнего доступа
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-pkonline}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pkonline-network
    profiles: ["localdb"]

  bot:
    build: .
    command: ["bash", "start.sh"]
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      # Настройки БД (локальная или внешняя)
      USE_EXTERNAL_DB: ${USE_EXTERNAL_DB:-false}
      DB_DSN: ${DB_DSN}
      EXTERNAL_DB_HOST: ${EXTERNAL_DB_HOST}
      EXTERNAL_DB_PORT: ${EXTERNAL_DB_PORT:-5432}
      EXTERNAL_DB_NAME: ${EXTERNAL_DB_NAME}
      EXTERNAL_DB_USER: ${EXTERNAL_DB_USER}
      EXTERNAL_DB_PASSWORD: ${EXTERNAL_DB_PASSWORD}
      EXTERNAL_DB_SSL: ${EXTERNAL_DB_SSL:-false}
      # Остальные настройки
      ADMIN_CHAT_ID: ${ADMIN_CHAT_ID}
      ADMIN_USER_ID: ${ADMIN_USER_ID}
      GENERAL_CHAT_ID: ${GENERAL_CHAT_ID:-0}
      ADMIN_LOG_CHAT_ID: ${ADMIN_LOG_CHAT_ID:-0}
      THREAD_WORK_TIME: ${THREAD_WORK_TIME:-0}
      THREAD_LK_PROCESSING: ${THREAD_LK_PROCESSING:-0}
      THREAD_LK_PROBLEM: ${THREAD_LK_PROBLEM:-0}
      THREAD_EPGU_ACCEPTED: ${THREAD_EPGU_ACCEPTED:-0}
      THREAD_EPGU_MAIL_QUEUE: ${THREAD_EPGU_MAIL_QUEUE:-0}
      THREAD_EPGU_PROBLEM: ${THREAD_EPGU_PROBLEM:-0}
      THREAD_MAIL_CONFIRMED: ${THREAD_MAIL_CONFIRMED:-0}
      THREAD_MAIL_REJECTED: ${THREAD_MAIL_REJECTED:-0}
      THREAD_PROBLEM_SOLVED: ${THREAD_PROBLEM_SOLVED:-0}
      THREAD_PROBLEM_SOLVED_QUEUE: ${THREAD_PROBLEM_SOLVED_QUEUE:-0}
      THREAD_PROBLEM_IN_PROGRESS: ${THREAD_PROBLEM_IN_PROGRESS:-0}
      THREAD_QUEUE_UPDATED: ${THREAD_QUEUE_UPDATED:-0}
      THREAD_ESCALATION: ${THREAD_ESCALATION:-0}
    restart: always
    volumes:
      - .:/app
    networks:
      - pkonline-network

  web-backend:
    build: 
      context: .
      dockerfile: web/backend/Dockerfile
    container_name: pkonline-web-backend
    restart: always
    environment:
      # Настройки БД (используем существующую БД)
      USE_EXTERNAL_DB: ${USE_EXTERNAL_DB:-false}
      DB_DSN: ${DB_DSN}
      EXTERNAL_DB_HOST: ${EXTERNAL_DB_HOST}
      EXTERNAL_DB_PORT: ${EXTERNAL_DB_PORT:-5432}
      EXTERNAL_DB_NAME: ${EXTERNAL_DB_NAME}
      EXTERNAL_DB_USER: ${EXTERNAL_DB_USER}
      EXTERNAL_DB_PASSWORD: ${EXTERNAL_DB_PASSWORD}
      EXTERNAL_DB_SSL: ${EXTERNAL_DB_SSL:-false}
      # Локальные настройки БД (если не используется внешняя)
      POSTGRES_DB: ${POSTGRES_DB:-pkonline}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # Настройки веб-интерфейса
      WEB_SECRET_KEY: ${WEB_SECRET_KEY:-your-secret-key-change-in-production}
      WEB_DEBUG: ${WEB_DEBUG:-false}
      # Часовой пояс
      TZ: Europe/Moscow
    ports:
      - "8000:8000"
    networks:
      - pkonline-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web-frontend:
    build: 
      context: ./web/frontend
      dockerfile: Dockerfile
    container_name: pkonline-web-frontend
    restart: always
    ports:
      - "11300:80"
    depends_on:
      web-backend:
        condition: service_healthy
    networks:
      - pkonline-network

  # Альтернативный сервис для разработки (без Nginx)
  web-frontend-dev:
    build: 
      context: ./web/frontend
      dockerfile: Dockerfile.dev
    container_name: pkonline-web-frontend-dev
    restart: always
    ports:
      - "11301:3000"
    depends_on:
      - web-backend
    networks:
      - pkonline-network
    profiles:
      - dev

volumes:
  pgdata:
    # Именованный volume для сохранения данных БД
    # Данные сохраняются между пересборками контейнеров
    driver: local

networks:
  pkonline-network:
    driver: bridge 
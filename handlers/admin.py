from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from db.crud import (
    add_employee, remove_employee, add_group_to_employee, remove_group_from_employee, list_employees_with_groups, is_admin, get_employee_by_tg_id, get_applications_by_queue_type, clear_queue_by_type, import_applications_from_excel, import_1c_applications_from_excel, get_all_work_days_report,
    get_applications_statistics_by_queue, search_applications_by_fio, update_application_field, delete_application, get_all_employees, export_overdue_mail_applications_to_excel, create_database_backup,
    update_employee_fio, get_employee_by_id, admin_start_work_day, admin_end_work_day, clear_work_time_data
)
from keyboards.admin import admin_main_menu_keyboard, admin_staff_menu_keyboard, admin_queue_menu_keyboard, admin_queue_type_keyboard, admin_queue_pagination_keyboard, group_choice_keyboard, admin_reports_menu_keyboard, admin_search_applications_keyboard, admin_application_edit_keyboard, admin_queue_choice_keyboard, admin_status_choice_keyboard, admin_problem_status_choice_keyboard, admin_cancel_keyboard, admin_chat_settings_keyboard, admin_thread_settings_keyboard, admin_employee_selection_keyboard, admin_work_time_management_keyboard
from keyboards.main import main_menu_keyboard
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from db.crud import Application, ApplicationStatusEnum, get_application_by_id
from datetime import date, datetime
from utils.logger import get_logger
import logging
import os
import tempfile
import json

router = Router()

class AdminStates(StatesGroup):
    waiting_tg_id = State()
    waiting_fio = State()
    waiting_tg_id_remove = State()
    waiting_tg_id_group = State()
    waiting_group_add = State()
    waiting_group_remove = State()
    waiting_employee_fio_edit = State()
    waiting_work_time_action = State()

class AdminQueueStates(StatesGroup):
    waiting_action = State()
    waiting_queue_type = State()
    waiting_upload_file = State()
    waiting_clear_confirm = State()
    waiting_1c_upload_file = State()

class AdminApplicationStates(StatesGroup):
    waiting_fio_search = State()
    waiting_fio_edit = State()
    waiting_date_edit = State()
    waiting_reason_edit = State()
    waiting_responsible_edit = State()
    waiting_problem_comment_edit = State()

class AdminChatStates(StatesGroup):
    waiting_general_chat_id = State()
    waiting_admin_chat_id = State()
    waiting_thread_id = State()

QUEUE_PAGE_SIZE = 20

async def check_admin(user_id: int) -> bool:
    return await is_admin(str(user_id))

cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]
])

@router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    await state.clear()
    await callback.message.edit_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_main_menu_keyboard())

@router.callback_query(F.data == "admin_staff_menu")
async def admin_staff_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:", reply_markup=admin_staff_menu_keyboard())

@router.callback_query(F.data == "admin_queue_menu")
async def admin_queue_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—è–º–∏:", reply_markup=admin_queue_menu_keyboard())

@router.callback_query(F.data == "admin_create_backup")
async def admin_create_backup(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await callback.message.edit_text("üíæ –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_file, message = await create_database_backup()
        
        if backup_file:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(backup_file, 'rb') as file:
                await callback.message.answer_document(
                    file,
                    caption=f"üíæ {message}\n\n–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=admin_queue_menu_keyboard()
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import os
            os.unlink(backup_file)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ {message}\n\n–§–∞–π–ª –±—ç–∫–∞–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.",
                reply_markup=admin_queue_menu_keyboard()
            )
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞
            await callback.message.edit_text(
                f"‚ùå {message}",
                reply_markup=admin_queue_menu_keyboard()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {str(e)}",
            reply_markup=admin_queue_menu_keyboard()
        )

@router.callback_query(F.data == "admin_add_employee")
async def admin_add_employee(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_tg_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=cancel_keyboard)

@router.message(AdminStates.waiting_tg_id)
async def admin_add_employee_tg_id(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_staff_menu_keyboard())
        return
    tg_id = message.text.strip()
    emp = await get_employee_by_tg_id(tg_id)
    if emp:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=cancel_keyboard)
        return
    await state.update_data(tg_id=tg_id)
    await state.set_state(AdminStates.waiting_fio)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=cancel_keyboard)

@router.message(AdminStates.waiting_fio)
async def admin_add_employee_fio(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_staff_menu_keyboard())
        return
    data = await state.get_data()
    tg_id = data.get("tg_id")
    fio = message.text.strip()
    try:
        await add_employee(tg_id, fio)
        await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {fio} ({tg_id}) –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=admin_staff_menu_keyboard())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}", reply_markup=cancel_keyboard)
    await state.clear()

@router.callback_query(F.data == "admin_remove_employee")
async def admin_remove_employee(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_tg_id_remove)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=cancel_keyboard)

@router.message(AdminStates.waiting_tg_id_remove)
async def admin_remove_employee_tg_id(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_staff_menu_keyboard())
        return
    tg_id = message.text.strip()
    emp = await get_employee_by_tg_id(tg_id)
    if not emp:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=cancel_keyboard)
        return
    try:
        await remove_employee(tg_id)
        await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {tg_id} —É–¥–∞–ª—ë–Ω.", reply_markup=admin_staff_menu_keyboard())
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}", reply_markup=cancel_keyboard)
    await state.clear()

@router.callback_query(F.data == "admin_add_group")
async def admin_add_group(callback: CallbackQuery, state: FSMContext):
    emps = await list_employees_with_groups()
    if not emps:
        await callback.message.edit_text("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã.", reply_markup=admin_staff_menu_keyboard())
        return
    builder = InlineKeyboardBuilder()
    for e in emps:
        btn_text = f"{e['fio']} ({e['tg_id']})"
        builder.button(text=btn_text, callback_data=f"choose_emp_group_{e['tg_id']}")
    builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_menu")
    builder.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:", reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("choose_emp_group_"))
async def admin_add_group_choose_employee(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.data.replace("choose_emp_group_", "")
    emp = await get_employee_by_tg_id(tg_id)
    if not emp:
        await callback.message.edit_text("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=admin_staff_menu_keyboard())
        await state.clear()
        return
    groups = [g.name for g in emp.groups] if emp.groups else []
    await state.update_data(tg_id=tg_id)
    await state.set_state(AdminStates.waiting_group_add)
    await callback.message.edit_text(f"–¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {', '.join(groups) if groups else '–Ω–µ—Ç'}\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=group_choice_keyboard())

@router.callback_query(AdminStates.waiting_group_add, F.data.startswith("group_"))
async def admin_add_group_choice(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tg_id = data.get("tg_id")
    group = callback.data.replace("group_", "")
    emp = await get_employee_by_tg_id(tg_id)
    if not emp:
        await callback.message.edit_text("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=admin_staff_menu_keyboard())
        await state.clear()
        return
    if group in [g.name for g in emp.groups]:
        await callback.message.edit_text(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —É–∂–µ –µ—Å—Ç—å –≥—Ä—É–ø–ø–∞ {group}.", reply_markup=admin_staff_menu_keyboard())
        await state.clear()
        return
    try:
        result = await add_group_to_employee(tg_id, group)
        if not result:
            await callback.message.edit_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É {group} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {tg_id}.", reply_markup=admin_staff_menu_keyboard())
        else:
            await callback.message.edit_text(f"–ì—Ä—É–ø–ø–∞ {group} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {tg_id}.", reply_markup=admin_staff_menu_keyboard())
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}", reply_markup=admin_staff_menu_keyboard())
    await state.clear()

@router.callback_query(F.data == "admin_remove_group")
async def admin_remove_group(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_tg_id_group)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:", reply_markup=cancel_keyboard)

@router.message(AdminStates.waiting_tg_id_group)
async def admin_remove_group_tg_id(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_staff_menu_keyboard())
        return
    tg_id = message.text.strip()
    emp = await get_employee_by_tg_id(tg_id)
    if not emp:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=cancel_keyboard)
        return
    groups = [g.name for g in emp.groups] if emp.groups else []
    if not groups:
        await message.answer("–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=admin_staff_menu_keyboard())
        await state.clear()
        return
    await state.update_data(tg_id=tg_id)
    await state.set_state(AdminStates.waiting_group_remove)
    await message.answer(f"–¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {', '.join(groups)}\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=group_choice_keyboard())

@router.callback_query(AdminStates.waiting_group_remove, F.data.startswith("group_"))
async def admin_remove_group_choice(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tg_id = data.get("tg_id")
    group = callback.data.replace("group_", "")
    emp = await get_employee_by_tg_id(tg_id)
    if not emp:
        await callback.message.edit_text("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=admin_staff_menu_keyboard())
        await state.clear()
        return
    if group not in [g.name for g in emp.groups]:
        await callback.message.edit_text(f"–£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø—ã {group}.", reply_markup=admin_staff_menu_keyboard())
        await state.clear()
        return
    try:
        await remove_group_from_employee(tg_id, group)
        await callback.message.edit_text(f"–ì—Ä—É–ø–ø–∞ {group} —É–¥–∞–ª–µ–Ω–∞ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {tg_id}.", reply_markup=admin_staff_menu_keyboard())
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}", reply_markup=admin_staff_menu_keyboard())
    await state.clear()

@router.callback_query(F.data == "admin_list_employees")
async def admin_list_employees(callback: CallbackQuery, state: FSMContext):
    emps = await list_employees_with_groups()
    if not emps:
        text = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    else:
        text = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n"
        for e in emps:
            text += f"\n<b>{e['fio']}</b> (<code>{e['tg_id']}</code>) {'[admin]' if e['is_admin'] else ''}\n"
            text += f"–ì—Ä—É–ø–ø—ã: {', '.join(e['groups']) if e['groups'] else '–Ω–µ—Ç'}\n"
    await callback.message.edit_text(text, reply_markup=admin_staff_menu_keyboard(), parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data == "admin_view_queue")
async def admin_view_queue(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminQueueStates.waiting_queue_type)
    await state.update_data(queue_action="view")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=admin_queue_type_keyboard())

@router.callback_query(F.data == "admin_clear_queue")
async def admin_clear_queue(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminQueueStates.waiting_queue_type)
    await state.update_data(queue_action="clear")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:", reply_markup=admin_queue_type_keyboard())

@router.callback_query(F.data == "admin_upload_queue")
async def admin_upload_queue(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminQueueStates.waiting_queue_type)
    await state.update_data(queue_action="upload")
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π:", reply_markup=admin_queue_type_keyboard())

@router.callback_query(AdminQueueStates.waiting_queue_type, F.data.startswith("admin_queue_type_"))
async def admin_queue_type_action(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    action = data.get("queue_action")
    queue_type = callback.data.replace("admin_queue_type_", "")
    await state.update_data(queue_type=queue_type)
    if action == "view":
        await state.update_data(queue_page=1)
        await show_queue_page(callback, state, queue_type, 1)
    elif action == "clear":
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_confirm_clear_queue")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_queue_menu")],
        ])
        await state.set_state(AdminQueueStates.waiting_clear_confirm)
        await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å {queue_type}?", reply_markup=kb)
    elif action == "upload":
        await state.set_state(AdminQueueStates.waiting_upload_file)
        await callback.message.edit_text(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å {queue_type}.", reply_markup=admin_queue_menu_keyboard())

@router.callback_query(F.data.startswith("admin_queue_page_"))
async def admin_queue_page(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –û–∂–∏–¥–∞–µ–º callback_data –≤–∏–¥–∞ 'admin_queue_page_{queue_type}_{page}'
    parts = callback.data.split("_")
    if len(parts) < 4:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=admin_queue_menu_keyboard())
        await state.clear()
        return
    queue_type = parts[3]
    try:
        page = int(parts[4])
    except (IndexError, ValueError):
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é.", reply_markup=admin_queue_menu_keyboard())
        await state.clear()
        return
    await state.update_data(queue_type=queue_type, queue_page=page)
    await show_queue_page(callback, state, queue_type, page)

async def show_queue_page(callback, state, queue_type, page):
    apps = await get_applications_by_queue_type(queue_type)
    total = len(apps)
    total_pages = max(1, (total + QUEUE_PAGE_SIZE - 1) // QUEUE_PAGE_SIZE)
    start = (page - 1) * QUEUE_PAGE_SIZE
    end = start + QUEUE_PAGE_SIZE
    page_apps = apps[start:end]
    if not page_apps:
        text = f"–û—á–µ—Ä–µ–¥—å {queue_type} –ø—É—Å—Ç–∞."
    else:
        text = f"–û—á–µ—Ä–µ–¥—å {queue_type} (—Å—Ç—Ä. {page}/{total_pages}):\n"
        for app in page_apps:
            text += f"\n<b>{app.fio}</b> | {app.submitted_at.strftime('%Y-%m-%d %H:%M')} | {app.status.value}"
    await callback.message.edit_text(text, reply_markup=admin_queue_pagination_keyboard(queue_type, page, total_pages), parse_mode="HTML")

@router.callback_query(AdminQueueStates.waiting_clear_confirm, F.data == "admin_confirm_clear_queue")
async def admin_confirm_clear_queue(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    queue_type = data.get("queue_type")
    await clear_queue_by_type(queue_type)
    await callback.message.edit_text(f"–û—á–µ—Ä–µ–¥—å {queue_type} –æ—á–∏—â–µ–Ω–∞!", reply_markup=admin_queue_menu_keyboard())
    await state.clear()

@router.message(AdminQueueStates.waiting_upload_file)
async def admin_upload_queue_file(message: Message, state: FSMContext):
    data = await state.get_data()
    queue_type = data.get("queue_type")
    if not message.document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª.")
        return
    progress_msg = await message.answer("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    try:
        file = await message.bot.download(message.document)
        import os
        import tempfile
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
            tmp.write(file.getvalue())
            tmp_path = tmp.name
        # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        async def update_progress_message(text):
            try:
                await progress_msg.edit_text(
                    f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É...\n\n{text}",
                    reply_markup=admin_queue_menu_keyboard()
                )
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        from db.crud import import_applications_from_excel
        result = await import_applications_from_excel(tmp_path, queue_type, update_progress_message)
        os.unlink(tmp_path)
        # result –º–æ–∂–µ—Ç –±—ã—Ç—å None, –Ω–æ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–≥–æ–≤, –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–≤–æ–¥–∏–º —Å–∫–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—â–µ–Ω–æ, –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫
        # –î–ª—è —ç—Ç–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ import_applications_from_excel –∫–æ—Ä—Ç–µ–∂ (added, skipped, total)
        if isinstance(result, dict):
            added = result.get('added', '?')
            skipped = result.get('skipped', '?')
            total = result.get('total', '?')
        elif isinstance(result, tuple) and len(result) == 3:
            added, skipped, total = result
        else:
            added = skipped = total = '?'
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
        telegram_logger = get_logger()
        if telegram_logger and added and added != '?' and int(added) > 0:
            emp = await get_employee_by_tg_id(str(message.from_user.id))
            if emp:
                await telegram_logger.log_queue_updated(queue_type, emp.fio, int(added))
        
        await progress_msg.edit_text(
            f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –¥–ª—è –æ—á–µ—Ä–µ–¥–∏: {queue_type}.\n"
            f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total}\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {added}\n"
            f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}",
            reply_markup=admin_queue_menu_keyboard()
        )
        await state.clear()
    except Exception as e:
        await progress_msg.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}", reply_markup=admin_queue_menu_keyboard())
        await state.clear()

@router.callback_query(F.data == "admin_upload_1c")
async def admin_upload_1c(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminQueueStates.waiting_1c_upload_file)
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –∏–∑ 1–° –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π –õ–ö –∏ –ï–ü–ì–£.\n\n"
        "–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏ –ø–æ —Å–ø–æ—Å–æ–±—É –ø–æ–¥–∞—á–∏\n"
        "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–ª–µ–Ω–∏–π\n"
        "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—á–µ—Ä–µ–¥–∏",
        reply_markup=admin_queue_menu_keyboard()
    )

@router.message(AdminQueueStates.waiting_1c_upload_file)
async def admin_upload_1c_file(message: Message, state: FSMContext):
    if not message.document:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –∏–∑ 1–°.")
        return
    
    progress_msg = await message.answer("üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–≥—Ä—É–∑–∫–∏ 1–°...\n\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.")
    
    try:
        file = await message.bot.download(message.document)
        import os
        import tempfile
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
            tmp.write(file.getvalue())
            tmp_path = tmp.name
        
        # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        async def update_progress_message(text):
            try:
                await progress_msg.edit_text(
                    f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–≥—Ä—É–∑–∫–∏ 1–°...\n\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤.\n\n{text}",
                    reply_markup=admin_queue_menu_keyboard()
                )
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–ª–µ–Ω–∏—è –∏–∑ 1–°
        result = await import_1c_applications_from_excel(tmp_path, update_progress_message)
        os.unlink(tmp_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = "üìä –ò–º–ø–æ—Ä—Ç –≤—ã–≥—Ä—É–∑–∫–∏ 1–° –∑–∞–≤–µ—Ä—à—ë–Ω\n\n"
        
        # –õ–ö –∑–∞—è–≤–ª–µ–Ω–∏—è
        lk_data = result.get('lk', {})
        lk_added = lk_data.get('added', 0)
        lk_updated = lk_data.get('updated', 0)
        lk_skipped = lk_data.get('skipped', 0)
        lk_total = lk_data.get('total', 0)
        
        report_text += f"üì± –õ–ö –∑–∞—è–≤–ª–µ–Ω–∏—è:\n"
        report_text += f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {lk_total}\n"
        report_text += f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {lk_added}\n"
        report_text += f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {lk_updated}\n"
        report_text += f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {lk_skipped}\n\n"
        
        # –ï–ü–ì–£ –∑–∞—è–≤–ª–µ–Ω–∏—è
        epgu_data = result.get('epgu', {})
        epgu_added = epgu_data.get('added', 0)
        epgu_updated = epgu_data.get('updated', 0)
        epgu_skipped = epgu_data.get('skipped', 0)
        epgu_total = epgu_data.get('total', 0)
        
        report_text += f"üåê –ï–ü–ì–£ –∑–∞—è–≤–ª–µ–Ω–∏—è:\n"
        report_text += f"   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {epgu_total}\n"
        report_text += f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {epgu_added}\n"
        report_text += f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {epgu_updated}\n"
        report_text += f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {epgu_skipped}\n\n"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π
        telegram_logger = get_logger()
        if telegram_logger:
            emp = await get_employee_by_tg_id(str(message.from_user.id))
            if emp:
                if lk_added > 0 or lk_updated > 0:
                    await telegram_logger.log_queue_updated('lk', emp.fio, lk_added + lk_updated)
                if epgu_added > 0 or epgu_updated > 0:
                    await telegram_logger.log_queue_updated('epgu', emp.fio, epgu_added + epgu_updated)
        
        await progress_msg.edit_text(
            report_text,
            reply_markup=admin_queue_menu_keyboard()
        )
        await state.clear()
        
    except Exception as e:
        await progress_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≤—ã–≥—Ä—É–∑–∫–∏ 1–°: {str(e)}", 
            reply_markup=admin_queue_menu_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "admin_reports_menu")
async def admin_reports_menu(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    await state.clear()
    await callback.message.edit_text("–û—Ç—á–µ—Ç—ã:", reply_markup=admin_reports_menu_keyboard())

@router.callback_query(F.data == "admin_full_report")
async def admin_full_report(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    reports = await get_all_work_days_report()
    
    if not reports:
        await callback.message.edit_text(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
            reply_markup=admin_reports_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
    report_text = f"üìä –ü–û–õ–ù–´–ô –û–¢–ß–ï–¢ –∑–∞ {date.today().strftime('%d.%m.%Y')}\n\n"
    
    total_applications = 0
    total_work_time = 0
    total_break_time = 0
    
    for report in reports:
        work_time_str = f"{report['total_work_time'] // 3600:02d}:{(report['total_work_time'] % 3600) // 60:02d}"
        break_time_str = f"{report['total_break_time'] // 3600:02d}:{(report['total_break_time'] % 3600) // 60:02d}"
        
        report_text += f"üë§ {report['employee_fio']}\n"
        if report['start_time']:
            report_text += f"   –ù–∞—á–∞–ª–æ: {report['start_time'].strftime('%H:%M')}\n"
        if report['end_time']:
            report_text += f"   –û–∫–æ–Ω—á–∞–Ω–∏–µ: {report['end_time'].strftime('%H:%M')}\n"
        report_text += f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time_str}\n"
        report_text += f"   –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {break_time_str}\n"
        report_text += f"   –ó–∞—è–≤–ª–µ–Ω–∏–π: {report['applications_processed']}\n"
        
        if report['breaks']:
            report_text += "   –ü–µ—Ä–µ—Ä—ã–≤—ã:\n"
            for i, break_item in enumerate(report['breaks'], 1):
                start_time = break_item['start_time'].strftime('%H:%M')
                if break_item['end_time']:
                    end_time = break_item['end_time'].strftime('%H:%M')
                    duration = break_item['duration'] // 60
                    report_text += f"     {i}. {start_time} - {end_time} ({duration} –º–∏–Ω)\n"
                else:
                    report_text += f"     {i}. {start_time} - –∞–∫—Ç–∏–≤–µ–Ω\n"
        
        report_text += "\n"
        
        total_applications += report['applications_processed']
        total_work_time += report['total_work_time']
        total_break_time += report['total_break_time']
    
    # –ò—Ç–æ–≥–∏
    total_work_time_str = f"{total_work_time // 3600:02d}:{(total_work_time % 3600) // 60:02d}"
    total_break_time_str = f"{total_break_time // 3600:02d}:{(total_break_time % 3600) // 60:02d}"
    
    report_text += f"üìà –ò–¢–û–ì–û:\n"
    report_text += f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {total_applications}\n"
    report_text += f"   –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_work_time_str}\n"
    report_text += f"   –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {total_break_time_str}\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(report_text) > 4000:
        parts = [report_text[i:i+4000] for i in range(0, len(report_text), 4000)]
        for i, part in enumerate(parts):
            if i == 0:
                await callback.message.edit_text(part)
            else:
                await callback.message.answer(part)
        await callback.message.answer("–û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=admin_reports_menu_keyboard())
    else:
        await callback.message.edit_text(report_text, reply_markup=admin_reports_menu_keyboard())

@router.callback_query(F.data == "admin_work_time_report")
async def admin_work_time_report(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    reports = await get_all_work_days_report()
    
    if not reports:
        await callback.message.edit_text(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—á–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
            reply_markup=admin_reports_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ä–∞–±–æ—á–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    report_text = f"‚è∞ –û–¢–ß–ï–¢ –ü–û –†–ê–ë–û–ß–ï–ú–£ –í–†–ï–ú–ï–ù–ò –∑–∞ {date.today().strftime('%d.%m.%Y')}\n\n"
    
    total_work_time = 0
    total_break_time = 0
    
    for report in reports:
        work_time_str = f"{report['total_work_time'] // 3600:02d}:{(report['total_work_time'] % 3600) // 60:02d}"
        break_time_str = f"{report['total_break_time'] // 3600:02d}:{(report['total_break_time'] % 3600) // 60:02d}"
        
        report_text += f"üë§ {report['employee_fio']}\n"
        if report['start_time']:
            report_text += f"   –ù–∞—á–∞–ª–æ: {report['start_time'].strftime('%H:%M')}\n"
        if report['end_time']:
            report_text += f"   –û–∫–æ–Ω—á–∞–Ω–∏–µ: {report['end_time'].strftime('%H:%M')}\n"
        report_text += f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time_str}\n"
        report_text += f"   –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {break_time_str}\n"
        
        if report['breaks']:
            report_text += "   –ü–µ—Ä–µ—Ä—ã–≤—ã:\n"
            for i, break_item in enumerate(report['breaks'], 1):
                start_time = break_item['start_time'].strftime('%H:%M')
                if break_item['end_time']:
                    end_time = break_item['end_time'].strftime('%H:%M')
                    duration = break_item['duration'] // 60
                    report_text += f"     {i}. {start_time} - {end_time} ({duration} –º–∏–Ω)\n"
                else:
                    report_text += f"     {i}. {start_time} - –∞–∫—Ç–∏–≤–µ–Ω\n"
        
        report_text += "\n"
        
        total_work_time += report['total_work_time']
        total_break_time += report['total_break_time']
    
    # –ò—Ç–æ–≥–∏
    total_work_time_str = f"{total_work_time // 3600:02d}:{(total_work_time % 3600) // 60:02d}"
    total_break_time_str = f"{total_break_time // 3600:02d}:{(total_break_time % 3600) // 60:02d}"
    
    report_text += f"üìà –ò–¢–û–ì–û:\n"
    report_text += f"   –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_work_time_str}\n"
    report_text += f"   –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {total_break_time_str}\n"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(report_text) > 4000:
        parts = [report_text[i:i+4000] for i in range(0, len(report_text), 4000)]
        for i, part in enumerate(parts):
            if i == 0:
                await callback.message.edit_text(part)
            else:
                await callback.message.answer(part)
        await callback.message.answer("–û—Ç—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=admin_reports_menu_keyboard())
    else:
        await callback.message.edit_text(report_text, reply_markup=admin_reports_menu_keyboard())

@router.callback_query(F.data == "admin_applications_report")
async def admin_applications_report(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–ª–µ–Ω–∏—è–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    queue_stats = await get_applications_statistics_by_queue()
    
    if not queue_stats:
        await callback.message.edit_text(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—è–≤–ª–µ–Ω–∏—è—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.",
            reply_markup=admin_reports_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–ª–µ–Ω–∏—è–º
    report_text = f"üìã –û–¢–ß–ï–¢ –ü–û –ó–ê–Ø–í–õ–ï–ù–ò–Ø–ú –∑–∞ {date.today().strftime('%d.%m.%Y')}\n\n"
    
    total_applications = 0
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    queue_order = ['lk', 'epgu', 'epgu_mail', 'epgu_problem']
    
    for queue_type in queue_order:
        if queue_type in queue_stats:
            stats = queue_stats[queue_type]
            queue_name = {
                'lk': '–õ–ö',
                'epgu': '–ï–ü–ì–£',
                'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
                'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
            }.get(queue_type, queue_type)
            
            report_text += f"üìä {queue_name}: {stats['total']} –∑–∞—è–≤–ª–µ–Ω–∏–π\n"
            
            if stats['by_employee']:
                for emp_fio, count in stats['by_employee'].items():
                    report_text += f"   üë§ {emp_fio}: {count}\n"
            
            report_text += "\n"
            total_applications += stats['total']
    
    # –ò—Ç–æ–≥–∏
    report_text += f"üìà –ò–¢–û–ì–û:\n"
    report_text += f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–π: {total_applications}\n"
    
    if total_applications == 0:
        report_text += "   –°–µ–≥–æ–¥–Ω—è –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å"
    
    await callback.message.edit_text(report_text, reply_markup=admin_reports_menu_keyboard())

@router.callback_query(F.data == "admin_export_overdue_mail")
async def admin_export_overdue_mail(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await callback.message.edit_text("üìÆ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π –ø–æ—á—Ç—ã...")
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–ª–µ–Ω–∏—è, –∂–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ–ª–µ–µ 3 –¥–Ω–µ–π
        filename, message = await export_overdue_mail_applications_to_excel(days_threshold=3)
        
        if filename:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(filename, 'rb') as file:
                await callback.message.answer_document(
                    file,
                    caption=f"üìÆ {message}\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∂–¥—É—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ—á—Ç—ã –±–æ–ª–µ–µ 3 –¥–Ω–µ–π.",
                    reply_markup=admin_reports_menu_keyboard()
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import os
            os.unlink(filename)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_text(
                f"‚úÖ {message}\n\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—ã—à–µ.",
                reply_markup=admin_reports_menu_keyboard()
            )
        else:
            # –ù–µ—Ç –∑–∞—è–≤–ª–µ–Ω–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            await callback.message.edit_text(
                f"‚ÑπÔ∏è {message}",
                reply_markup=admin_reports_menu_keyboard()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–ª–µ–Ω–∏–π –ø–æ—á—Ç—ã: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}",
            reply_markup=admin_reports_menu_keyboard()
        )

@router.callback_query(F.data == "admin_add_test_employees")
async def admin_add_test_employees(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
    test_employees = [
        {"tg_id": "6974821754", "fio": "Test Dot"},
        {"tg_id": "5418889030", "fio": "Test Msk"}
    ]
    
    added_count = 0
    already_exists_count = 0
    
    for emp_data in test_employees:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        existing_emp = await get_employee_by_tg_id(emp_data["tg_id"])
        if existing_emp:
            already_exists_count += 1
            continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        try:
            await add_employee(emp_data["tg_id"], emp_data["fio"])
            added_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {emp_data['fio']}: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    message_text = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
    message_text += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}\n"
    message_text += f"‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {already_exists_count}\n\n"
    
    if added_count > 0:
        message_text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n"
        for emp_data in test_employees:
            message_text += f"‚Ä¢ {emp_data['fio']} (ID: {emp_data['tg_id']})\n"
    
    await callback.message.edit_text(message_text, reply_markup=admin_staff_menu_keyboard())

@router.callback_query(F.data == "admin_add_main_employees")
async def admin_add_main_employees(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏
    main_employees = [
        {
            "tg_id": "2019439815", 
            "fio": "–ß–µ—Ä–Ω—è–∫–æ–≤–∞ –ö—Å–µ–Ω–∏—è –í–ª–∞–¥–ª–µ–Ω–æ–≤–Ω–∞",
            "groups": ["lk", "epgu", "mail", "problem"]
        },
        {
            "tg_id": "1329555538", 
            "fio": "–ú—É–∫—É–º–æ–≤–∞ –í–∏–∫—Ç–æ—Ä–∏—è –î–µ–Ω–∏—Å–æ–≤–Ω–∞",
            "groups": ["lk", "epgu", "mail", "problem"]
        },
        {
            "tg_id": "5163143779", 
            "fio": "–ì–æ—Ä—è—á–µ–≤–∞ –î–∏–∞–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
            "groups": ["lk"]
        },
        {
            "tg_id": "1059622323", 
            "fio": "–ö—Ä—é–∫–æ–≤–∞ –ü–æ–ª–∏–Ω–∞ –ê–Ω–¥—Ä–µ–µ–≤–Ω–∞",
            "groups": ["lk"]
        },
        {
            "tg_id": "945793471", 
            "fio": "–ö–æ–∂–∞–Ω–æ–≤–∞ –ê—Ä–∏–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
            "groups": ["lk"]
        },
        {
            "tg_id": "1395039679", 
            "fio": "–ö–∞—Ä—Ç–æ–µ–≤–∞ –†–∞—è–Ω–∞ –Æ–Ω—É—Å–æ–≤–Ω–∞",
            "groups": ["lk"]
        }
    ]
    
    added_count = 0
    already_exists_count = 0
    groups_added_count = 0
    
    for emp_data in main_employees:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
        existing_emp = await get_employee_by_tg_id(emp_data["tg_id"])
        if existing_emp:
            already_exists_count += 1
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            for group in emp_data["groups"]:
                try:
                    await add_group_to_employee(emp_data["tg_id"], group)
                    groups_added_count += 1
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {group} –∫ {emp_data['fio']}: {e}")
            continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        try:
            await add_employee(emp_data["tg_id"], emp_data["fio"])
            added_count += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∫ –Ω–æ–≤–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
            for group in emp_data["groups"]:
                try:
                    await add_group_to_employee(emp_data["tg_id"], group)
                    groups_added_count += 1
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã {group} –∫ {emp_data['fio']}: {e}")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {emp_data['fio']}: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    message_text = f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
    message_text += f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {added_count}\n"
    message_text += f"‚ö†Ô∏è –£–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ: {already_exists_count}\n"
    message_text += f"üè∑Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {groups_added_count}\n\n"
    
    if added_count > 0:
        message_text += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n"
        for emp_data in main_employees:
            groups_str = ", ".join(emp_data["groups"])
            message_text += f"‚Ä¢ {emp_data['fio']} (ID: {emp_data['tg_id']})\n"
            message_text += f"  –ì—Ä—É–ø–ø—ã: {groups_str}\n\n"
    
    await callback.message.edit_text(message_text, reply_markup=admin_staff_menu_keyboard())

def group_choice_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–õ–ö", callback_data="group_lk")],
        [InlineKeyboardButton(text="–ï–ü–ì–£", callback_data="group_epgu")],
        [InlineKeyboardButton(text="–ü–æ—á—Ç–∞", callback_data="group_mail")],
        [InlineKeyboardButton(text="–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º", callback_data="group_problem")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_menu")]
    ])

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–ò–°–ö–ê –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–Ø–í–õ–ï–ù–ò–ô =====

@router.callback_query(F.data == "admin_search_applications")
async def admin_search_applications_menu(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    await state.clear()
    await callback.message.edit_text(
        "üîç –ü–æ–∏—Å–∫ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_search_applications_keyboard()
    )

@router.callback_query(F.data == "admin_search_by_fio")
async def admin_search_by_fio_start(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    await state.set_state(AdminApplicationStates.waiting_fio_search)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π –≤–æ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥—è—Ö:",
        reply_markup=admin_cancel_keyboard()
    )

@router.message(AdminApplicationStates.waiting_fio_search)
async def admin_search_by_fio_process(message: Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    fio = message.text.strip()
    if not fio:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞.", reply_markup=admin_cancel_keyboard())
        return
    
    applications = await search_applications_by_fio(fio)
    
    if not applications:
        await message.answer(
            f"–ó–∞—è–≤–ª–µ–Ω–∏—è –¥–ª—è '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.",
            reply_markup=admin_search_applications_keyboard()
        )
        await state.clear()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è
    text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(applications)} –∑–∞—è–≤–ª–µ–Ω–∏–π –¥–ª—è '{fio}':\n\n"
    
    for i, app in enumerate(applications[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        status_emoji = {
            'queued': '‚è≥',
            'in_progress': 'üîÑ',
            'accepted': '‚úÖ',
            'rejected': '‚ùå',
            'problem': '‚ö†Ô∏è'
        }.get(app.status.value, '‚ùì')
        
        queue_name = {
            'lk': '–õ–ö',
            'epgu': '–ï–ü–ì–£',
            'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
            'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
        }.get(app.queue_type, app.queue_type)
        
        text += f"{i}. {status_emoji} <b>ID: {app.id}</b>\n"
        text += f"   üìã {app.fio}\n"
        text += f"   üìÖ {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"   üèõÔ∏è {queue_name}\n"
        text += f"   üìä {app.status.value}\n"
        if app.processed_by:
            text += f"   üë§ {app.processed_by.fio}\n"
        text += "\n"
    
    if len(applications) > 10:
        text += f"... –∏ –µ—â–µ {len(applications) - 10} –∑–∞—è–≤–ª–µ–Ω–∏–π\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for i, app in enumerate(applications[:10], 1):
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{i}. {app.fio} ({app.queue_type})", 
                callback_data=f"admin_edit_application_{app.id}"
            )
        ])
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_search_applications")])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data.startswith("admin_edit_application_"))
async def admin_edit_application_menu(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    app_id = int(callback.data.replace("admin_edit_application_", ""))
    app = await get_application_by_id(app_id)
    
    if not app:
        await callback.message.edit_text(
            "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=admin_search_applications_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–ª–µ–Ω–∏–∏
    status_emoji = {
        'queued': '‚è≥',
        'in_progress': 'üîÑ',
        'accepted': '‚úÖ',
        'rejected': '‚ùå',
        'problem': '‚ö†Ô∏è'
    }.get(app.status.value, '‚ùì')
    
    queue_name = {
        'lk': '–õ–ö',
        'epgu': '–ï–ü–ì–£',
        'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
        'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
    }.get(app.queue_type, app.queue_type)
    
    text = f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n\n"
    text += f"üÜî <b>ID:</b> {app.id}\n"
    text += f"üë§ <b>–§–ò–û:</b> {app.fio}\n"
    text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üèõÔ∏è <b>–û—á–µ—Ä–µ–¥—å:</b> {queue_name}\n"
    text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {app.status.value}\n"
    text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason or '-'}\n"
    text += f"üë§ <b>–û–±—Ä–∞–±–æ—Ç–∞–ª:</b> {app.processed_by.fio if app.processed_by else '-'}\n"
    text += f"‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_status.value if app.problem_status else '-'}\n"
    text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_comment or '-'}\n"
    text += f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {app.problem_responsible or '-'}\n"
    
    await callback.message.edit_text(text, reply_markup=admin_application_edit_keyboard(app_id), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
@router.callback_query(F.data.startswith("admin_edit_fio_"))
async def admin_edit_fio_start(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    app_id = int(callback.data.replace("admin_edit_fio_", ""))
    await state.update_data(app_id=app_id)
    await state.set_state(AdminApplicationStates.waiting_fio_edit)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
        reply_markup=admin_cancel_keyboard()
    )

@router.message(AdminApplicationStates.waiting_fio_edit)
async def admin_edit_fio_process(message: Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    app_id = data.get("app_id")
    new_fio = message.text.strip()
    
    if not new_fio:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û.", reply_markup=admin_cancel_keyboard())
        return
    
    success = await update_application_field(app_id, "fio", new_fio)
    if success:
        await message.answer(f"‚úÖ –§–ò–û –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_fio}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞—è–≤–ª–µ–Ω–∏—è
        app = await get_application_by_id(app_id)
        if app:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–ª–µ–Ω–∏–∏
            status_emoji = {
                'queued': '‚è≥',
                'in_progress': 'üîÑ',
                'accepted': '‚úÖ',
                'rejected': '‚ùå',
                'problem': '‚ö†Ô∏è'
            }.get(app.status.value, '‚ùì')
            
            queue_name = {
                'lk': '–õ–ö',
                'epgu': '–ï–ü–ì–£',
                'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
                'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
            }.get(app.queue_type, app.queue_type)
            
            text = f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n\n"
            text += f"üÜî <b>ID:</b> {app.id}\n"
            text += f"üë§ <b>–§–ò–û:</b> {app.fio}\n"
            text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üèõÔ∏è <b>–û—á–µ—Ä–µ–¥—å:</b> {queue_name}\n"
            text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {app.status.value}\n"
            text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason or '-'}\n"
            text += f"üë§ <b>–û–±—Ä–∞–±–æ—Ç–∞–ª:</b> {app.processed_by.fio if app.processed_by else '-'}\n"
            text += f"‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_status.value if app.problem_status else '-'}\n"
            text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_comment or '-'}\n"
            text += f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {app.problem_responsible or '-'}\n"
            
            await message.answer(text, reply_markup=admin_application_edit_keyboard(app_id), parse_mode="HTML")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û", reply_markup=admin_cancel_keyboard())
    
    await state.clear()

@router.callback_query(F.data.startswith("admin_edit_queue_"))
async def admin_edit_queue_menu(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    app_id = int(callback.data.replace("admin_edit_queue_", ""))
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å:",
        reply_markup=admin_queue_choice_keyboard(app_id)
    )

@router.callback_query(F.data.startswith("admin_set_queue_"))
async def admin_set_queue(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º callback_data
    data = callback.data.replace("admin_set_queue_", "")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏ –∏ ID –∑–∞—è–≤–ª–µ–Ω–∏—è
    if data.startswith("epgu_mail_"):
        queue_type = "epgu_mail"
        app_id = int(data.replace("epgu_mail_", ""))
    elif data.startswith("epgu_problem_"):
        queue_type = "epgu_problem"
        app_id = int(data.replace("epgu_problem_", ""))
    elif data.startswith("epgu_"):
        queue_type = "epgu"
        app_id = int(data.replace("epgu_", ""))
    elif data.startswith("lk_"):
        queue_type = "lk"
        app_id = int(data.replace("lk_", ""))
    else:
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—á–µ—Ä–µ–¥–∏", reply_markup=admin_cancel_keyboard())
        return
    
    success = await update_application_field(app_id, "queue_type", queue_type)
    if success:
        queue_name = {
            'lk': '–õ–ö',
            'epgu': '–ï–ü–ì–£',
            'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
            'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
        }.get(queue_type, queue_type)
        await callback.message.edit_text(f"‚úÖ –û—á–µ—Ä–µ–¥—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {queue_name}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞—è–≤–ª–µ–Ω–∏—è
        app = await get_application_by_id(app_id)
        if app:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–ª–µ–Ω–∏–∏
            status_emoji = {
                'queued': '‚è≥',
                'in_progress': 'üîÑ',
                'accepted': '‚úÖ',
                'rejected': '‚ùå',
                'problem': '‚ö†Ô∏è'
            }.get(app.status.value, '‚ùì')
            
            queue_name = {
                'lk': '–õ–ö',
                'epgu': '–ï–ü–ì–£',
                'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
                'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
            }.get(app.queue_type, app.queue_type)
            
            text = f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n\n"
            text += f"üÜî <b>ID:</b> {app.id}\n"
            text += f"üë§ <b>–§–ò–û:</b> {app.fio}\n"
            text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üèõÔ∏è <b>–û—á–µ—Ä–µ–¥—å:</b> {queue_name}\n"
            text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {app.status.value}\n"
            text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason or '-'}\n"
            text += f"üë§ <b>–û–±—Ä–∞–±–æ—Ç–∞–ª:</b> {app.processed_by.fio if app.processed_by else '-'}\n"
            text += f"‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_status.value if app.problem_status else '-'}\n"
            text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_comment or '-'}\n"
            text += f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {app.problem_responsible or '-'}\n"
            
            await callback.message.edit_text(text, reply_markup=admin_application_edit_keyboard(app_id), parse_mode="HTML")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏", reply_markup=admin_cancel_keyboard())

@router.callback_query(F.data.startswith("admin_edit_status_"))
async def admin_edit_status_menu(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    app_id = int(callback.data.replace("admin_edit_status_", ""))
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=admin_status_choice_keyboard(app_id)
    )

@router.callback_query(F.data.startswith("admin_set_status_"))
async def admin_set_status(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º callback_data
    data = callback.data.replace("admin_set_status_", "")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ ID –∑–∞—è–≤–ª–µ–Ω–∏—è
    if data.startswith("in_progress_"):
        status_name = "in_progress"
        app_id = int(data.replace("in_progress_", ""))
    elif data.startswith("accepted_"):
        status_name = "accepted"
        app_id = int(data.replace("accepted_", ""))
    elif data.startswith("rejected_"):
        status_name = "rejected"
        app_id = int(data.replace("rejected_", ""))
    elif data.startswith("problem_"):
        status_name = "problem"
        app_id = int(data.replace("problem_", ""))
    elif data.startswith("queued_"):
        status_name = "queued"
        app_id = int(data.replace("queued_", ""))
    else:
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å", reply_markup=admin_cancel_keyboard())
        return
    
    status_map = {
        'queued': ApplicationStatusEnum.QUEUED,
        'in_progress': ApplicationStatusEnum.IN_PROGRESS,
        'accepted': ApplicationStatusEnum.ACCEPTED,
        'rejected': ApplicationStatusEnum.REJECTED,
        'problem': ApplicationStatusEnum.PROBLEM
    }
    
    new_status = status_map.get(status_name)
    if new_status:
        success = await update_application_field(app_id, "status", new_status)
        if success:
            status_display = {
                'queued': '–í –æ—á–µ—Ä–µ–¥–∏',
                'in_progress': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'accepted': '–ü—Ä–∏–Ω—è—Ç–æ',
                'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
                'problem': '–ü—Ä–æ–±–ª–µ–º–∞'
            }.get(status_name, status_name)
            await callback.message.edit_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_display}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞—è–≤–ª–µ–Ω–∏—è
            app = await get_application_by_id(app_id)
            if app:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–ª–µ–Ω–∏–∏
                status_emoji = {
                    'queued': '‚è≥',
                    'in_progress': 'üîÑ',
                    'accepted': '‚úÖ',
                    'rejected': '‚ùå',
                    'problem': '‚ö†Ô∏è'
                }.get(app.status.value, '‚ùì')
                
                queue_name = {
                    'lk': '–õ–ö',
                    'epgu': '–ï–ü–ì–£',
                    'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
                    'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
                }.get(app.queue_type, app.queue_type)
                
                text = f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n\n"
                text += f"üÜî <b>ID:</b> {app.id}\n"
                text += f"üë§ <b>–§–ò–û:</b> {app.fio}\n"
                text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"üèõÔ∏è <b>–û—á–µ—Ä–µ–¥—å:</b> {queue_name}\n"
                text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {app.status.value}\n"
                text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason or '-'}\n"
                text += f"üë§ <b>–û–±—Ä–∞–±–æ—Ç–∞–ª:</b> {app.processed_by.fio if app.processed_by else '-'}\n"
                text += f"‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_status.value if app.problem_status else '-'}\n"
                text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_comment or '-'}\n"
                text += f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {app.problem_responsible or '-'}\n"
                
                await callback.message.edit_text(text, reply_markup=admin_application_edit_keyboard(app_id), parse_mode="HTML")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", reply_markup=admin_cancel_keyboard())

@router.callback_query(F.data.startswith("admin_edit_reason_"))
async def admin_edit_reason_start(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    app_id = int(callback.data.replace("admin_edit_reason_", ""))
    await state.update_data(app_id=app_id)
    await state.set_state(AdminApplicationStates.waiting_reason_edit)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏—á–∏–Ω—É:",
        reply_markup=admin_cancel_keyboard()
    )

@router.message(AdminApplicationStates.waiting_reason_edit)
async def admin_edit_reason_process(message: Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    app_id = data.get("app_id")
    new_reason = message.text.strip()
    
    success = await update_application_field(app_id, "status_reason", new_reason)
    if success:
        await message.answer(f"‚úÖ –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_reason}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞—è–≤–ª–µ–Ω–∏—è
        app = await get_application_by_id(app_id)
        if app:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–ª–µ–Ω–∏–∏
            status_emoji = {
                'queued': '‚è≥',
                'in_progress': 'üîÑ',
                'accepted': '‚úÖ',
                'rejected': '‚ùå',
                'problem': '‚ö†Ô∏è'
            }.get(app.status.value, '‚ùì')
            
            queue_name = {
                'lk': '–õ–ö',
                'epgu': '–ï–ü–ì–£',
                'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
                'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
            }.get(app.queue_type, app.queue_type)
            
            text = f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n\n"
            text += f"üÜî <b>ID:</b> {app.id}\n"
            text += f"üë§ <b>–§–ò–û:</b> {app.fio}\n"
            text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üèõÔ∏è <b>–û—á–µ—Ä–µ–¥—å:</b> {queue_name}\n"
            text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {app.status.value}\n"
            text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason or '-'}\n"
            text += f"üë§ <b>–û–±—Ä–∞–±–æ—Ç–∞–ª:</b> {app.processed_by.fio if app.processed_by else '-'}\n"
            text += f"‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_status.value if app.problem_status else '-'}\n"
            text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_comment or '-'}\n"
            text += f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {app.problem_responsible or '-'}\n"
            
            await message.answer(text, reply_markup=admin_application_edit_keyboard(app_id), parse_mode="HTML")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏—á–∏–Ω—ã", reply_markup=admin_cancel_keyboard())
    
    await state.clear()

@router.callback_query(F.data.startswith("admin_edit_responsible_"))
async def admin_edit_responsible_start(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    app_id = int(callback.data.replace("admin_edit_responsible_", ""))
    await state.update_data(app_id=app_id)
    await state.set_state(AdminApplicationStates.waiting_responsible_edit)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ:",
        reply_markup=admin_cancel_keyboard()
    )

@router.message(AdminApplicationStates.waiting_responsible_edit)
async def admin_edit_responsible_process(message: Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    data = await state.get_data()
    app_id = data.get("app_id")
    new_responsible = message.text.strip()
    
    success = await update_application_field(app_id, "problem_responsible", new_responsible)
    if success:
        await message.answer(f"‚úÖ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_responsible}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞—è–≤–ª–µ–Ω–∏—è
        app = await get_application_by_id(app_id)
        if app:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–ª–µ–Ω–∏–∏
            status_emoji = {
                'queued': '‚è≥',
                'in_progress': 'üîÑ',
                'accepted': '‚úÖ',
                'rejected': '‚ùå',
                'problem': '‚ö†Ô∏è'
            }.get(app.status.value, '‚ùì')
            
            queue_name = {
                'lk': '–õ–ö',
                'epgu': '–ï–ü–ì–£',
                'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
                'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
            }.get(app.queue_type, app.queue_type)
            
            text = f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n\n"
            text += f"üÜî <b>ID:</b> {app.id}\n"
            text += f"üë§ <b>–§–ò–û:</b> {app.fio}\n"
            text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üèõÔ∏è <b>–û—á–µ—Ä–µ–¥—å:</b> {queue_name}\n"
            text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {app.status.value}\n"
            text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason or '-'}\n"
            text += f"üë§ <b>–û–±—Ä–∞–±–æ—Ç–∞–ª:</b> {app.processed_by.fio if app.processed_by else '-'}\n"
            text += f"‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_status.value if app.problem_status else '-'}\n"
            text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_comment or '-'}\n"
            text += f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {app.problem_responsible or '-'}\n"
            
            await message.answer(text, reply_markup=admin_application_edit_keyboard(app_id), parse_mode="HTML")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ", reply_markup=admin_cancel_keyboard())
    
    await state.clear()

@router.callback_query(F.data.startswith("admin_edit_problem_status_"))
async def admin_edit_problem_status_menu(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    app_id = int(callback.data.replace("admin_edit_problem_status_", ""))
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=admin_problem_status_choice_keyboard(app_id)
    )

@router.callback_query(F.data.startswith("admin_set_problem_status_"))
async def admin_set_problem_status(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º callback_data
    data = callback.data.replace("admin_set_problem_status_", "")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã –∏ ID –∑–∞—è–≤–ª–µ–Ω–∏—è
    if data.startswith("new_"):
        status_name = "new"
        app_id = int(data.replace("new_", ""))
    elif data.startswith("in_progress_"):
        status_name = "in_progress"
        app_id = int(data.replace("in_progress_", ""))
    elif data.startswith("solved_"):
        status_name = "solved"
        app_id = int(data.replace("solved_", ""))
    elif data.startswith("solved_return_"):
        status_name = "solved_return"
        app_id = int(data.replace("solved_return_", ""))
    else:
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã", reply_markup=admin_cancel_keyboard())
        return
    
    from db.models import ProblemStatusEnum
    status_map = {
        'new': ProblemStatusEnum.NEW,
        'in_progress': ProblemStatusEnum.IN_PROGRESS,
        'solved': ProblemStatusEnum.SOLVED,
        'solved_return': ProblemStatusEnum.SOLVED_RETURN
    }
    
    new_status = status_map.get(status_name)
    if new_status:
        success = await update_application_field(app_id, "problem_status", new_status)
        if success:
            status_display = {
                'new': '–ù–æ–≤–æ–µ',
                'in_progress': '–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ—à–µ–Ω–∏—è',
                'solved': '–†–µ—à–µ–Ω–æ',
                'solved_return': '–†–µ—à–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É'
            }.get(status_name, status_name)
            await callback.message.edit_text(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_display}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞—è–≤–ª–µ–Ω–∏—è
            app = await get_application_by_id(app_id)
            if app:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–ª–µ–Ω–∏–∏
                status_emoji = {
                    'queued': '‚è≥',
                    'in_progress': 'üîÑ',
                    'accepted': '‚úÖ',
                    'rejected': '‚ùå',
                    'problem': '‚ö†Ô∏è'
                }.get(app.status.value, '‚ùì')
                
                queue_name = {
                    'lk': '–õ–ö',
                    'epgu': '–ï–ü–ì–£',
                    'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
                    'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
                }.get(app.queue_type, app.queue_type)
                
                text = f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è</b>\n\n"
                text += f"üÜî <b>ID:</b> {app.id}\n"
                text += f"üë§ <b>–§–ò–û:</b> {app.fio}\n"
                text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
                text += f"üèõÔ∏è <b>–û—á–µ—Ä–µ–¥—å:</b> {queue_name}\n"
                text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {app.status.value}\n"
                text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason or '-'}\n"
                text += f"üë§ <b>–û–±—Ä–∞–±–æ—Ç–∞–ª:</b> {app.processed_by.fio if app.processed_by else '-'}\n"
                text += f"‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_status.value if app.problem_status else '-'}\n"
                text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–±–ª–µ–º—ã:</b> {app.problem_comment or '-'}\n"
                text += f"üë§ <b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {app.problem_responsible or '-'}\n"
                
                await callback.message.edit_text(text, reply_markup=admin_application_edit_keyboard(app_id), parse_mode="HTML")
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–ª–µ–º—ã", reply_markup=admin_cancel_keyboard())

@router.callback_query(F.data.startswith("admin_delete_application_"))
async def admin_delete_application_confirm(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    app_id = int(callback.data.replace("admin_delete_application_", ""))
    app = await get_application_by_id(app_id)
    
    if not app:
        await callback.message.edit_text(
            "–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=admin_search_applications_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_{app_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_edit_application_{app_id}")]
    ])
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ?\n\n"
        f"ID: {app.id}\n"
        f"–§–ò–û: {app.fio}\n"
        f"–û—á–µ—Ä–µ–¥—å: {app.queue_type}\n"
        f"–°—Ç–∞—Ç—É—Å: {app.status.value}",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("admin_confirm_delete_"))
async def admin_confirm_delete_application(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    app_id = int(callback.data.replace("admin_confirm_delete_", ""))
    
    success = await delete_application(app_id)
    if success:
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ {app_id} —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=admin_search_applications_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è.",
            reply_markup=admin_search_applications_keyboard()
        )

@router.callback_query(F.data == "admin_chat_settings")
async def admin_chat_settings(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    await state.clear()
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        "‚Ä¢ –û–±—â–∏–π —á–∞—Ç - —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ —Å —Ç—Ä–µ–¥–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π\n"
        "‚Ä¢ –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç - –æ–±—ã—á–Ω—ã–π —á–∞—Ç –¥–ª—è –æ—à–∏–±–æ–∫ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤\n"
        "‚Ä¢ –¢—Ä–µ–¥—ã - –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–µ—Ç–∫–∏ –≤ –æ–±—â–µ–º —á–∞—Ç–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π",
        reply_markup=admin_chat_settings_keyboard()
    )

@router.callback_query(F.data == "admin_set_general_chat")
async def admin_set_general_chat(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    await state.set_state(AdminChatStates.waiting_general_chat_id)
    await callback.message.edit_text(
        "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—â–µ–≥–æ —á–∞—Ç–∞:\n\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É\n"
        "2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
        "3. –í–∫–ª—é—á–∏—Ç–µ —Ç—Ä–µ–¥—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≥—Ä—É–ø–ø—ã\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —á–∞—Ç–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã)",
        reply_markup=cancel_keyboard
    )

@router.callback_query(F.data == "admin_set_admin_chat")
async def admin_set_admin_chat(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    await state.set_state(AdminChatStates.waiting_admin_chat_id)
    await callback.message.edit_text(
        "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞:\n\n"
        "1. –°–æ–∑–¥–∞–π—Ç–µ –æ–±—ã—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —á–∞—Ç–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞)\n\n"
        "–≠—Ç–æ—Ç —á–∞—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—à–∏–±–æ–∫ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤",
        reply_markup=cancel_keyboard
    )

@router.callback_query(F.data == "admin_set_threads")
async def admin_set_threads(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    await state.clear()
    await callback.message.edit_text(
        "üßµ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ–¥–æ–≤:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ–¥–∞ –Ω—É–∂–Ω–æ:\n"
        "1. –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–¥ –≤ –æ–±—â–µ–º —á–∞—Ç–µ\n"
        "2. –ü–æ–ª—É—á–∏—Ç—å ID —Ç—Ä–µ–¥–∞\n"
        "3. –£–∫–∞–∑–∞—Ç—å –µ–≥–æ –∑–¥–µ—Å—å",
        reply_markup=admin_thread_settings_keyboard()
    )

@router.callback_query(F.data.startswith("admin_set_thread_"))
async def admin_set_thread(callback: CallbackQuery, state: FSMContext):
    if not await check_admin(callback.from_user.id):
        return
    
    thread_name = callback.data.replace("admin_set_thread_", "")
    thread_names = {
        "work_time": "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
        "lk_processing": "–õ–ö - –û–±—Ä–∞–±–æ—Ç–∫–∞",
        "lk_problem": "–õ–ö - –ü—Ä–æ–±–ª–µ–º–∞",
        "epgu_accepted": "–ï–ü–ì–£ - –ü—Ä–∏–Ω—è—Ç–æ",
        "epgu_mail_queue": "–ï–ü–ì–£ - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã",
        "epgu_problem": "–ï–ü–ì–£ - –ü—Ä–æ–±–ª–µ–º–∞",
        "mail_confirmed": "–ü–æ—á—Ç–∞ - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
        "mail_rejected": "–ü–æ—á—Ç–∞ - –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        "problem_solved": "–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ",
        "problem_solved_queue": "–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
        "problem_in_progress": "–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º - –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω",
        "queue_updated": "–û—á–µ—Ä–µ–¥–∏ - –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–ª–µ–Ω–∏–π",
        "escalation": "–≠—Å–∫–∞–ª–∞—Ü–∏—è"
    }
    
    thread_display_name = thread_names.get(thread_name, thread_name)
    
    await state.set_state(AdminChatStates.waiting_thread_id)
    await state.update_data(thread_name=thread_name)
    
    await callback.message.edit_text(
        f"üßµ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ–¥–∞: {thread_display_name}\n\n"
        "1. –°–æ–∑–¥–∞–π—Ç–µ —Ç—Ä–µ–¥ –≤ –æ–±—â–µ–º —á–∞—Ç–µ\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID —Ç—Ä–µ–¥–∞ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç—Ä–µ–¥–∞)\n\n"
        "ID —Ç—Ä–µ–¥–∞ - —ç—Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ @userinfobot",
        reply_markup=cancel_keyboard
    )

@router.message(AdminChatStates.waiting_general_chat_id)
async def process_general_chat_id(message: Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å chat_id –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if message.forward_from_chat:
            chat_id = message.forward_from_chat.id
        else:
            chat_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
        if message.forward_from_chat and message.forward_from_chat.type != "supergroup":
            await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–¥–∞–º–∏.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        config_data = {}
        config_file = "chat_config.json"
        
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
        
        config_data['GENERAL_CHAT_ID'] = chat_id
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, ensure_ascii=False, indent=2)
        
        await message.answer(
            f"‚úÖ –û–±—â–∏–π —á–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {chat_id}\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç—Ä–µ–¥—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
            reply_markup=admin_chat_settings_keyboard()
        )
        await state.clear()
        
    except (ValueError, AttributeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞.",
            reply_markup=cancel_keyboard
        )

@router.message(AdminChatStates.waiting_admin_chat_id)
async def process_admin_chat_id(message: Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å chat_id –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if message.forward_from_chat:
            chat_id = message.forward_from_chat.id
        else:
            chat_id = int(message.text.strip())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_data = {}
        config_file = "chat_config.json"
        
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
        
        config_data['ADMIN_LOG_CHAT_ID'] = chat_id
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, ensure_ascii=False, indent=2)
        
        await message.answer(
            f"‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {chat_id}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—Å–µ –æ—à–∏–±–∫–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
            reply_markup=admin_chat_settings_keyboard()
        )
        await state.clear()
        
    except (ValueError, AttributeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞.",
            reply_markup=cancel_keyboard
        )

@router.message(AdminChatStates.waiting_thread_id)
async def process_thread_id(message: Message, state: FSMContext):
    if not await check_admin(message.from_user.id):
        return
    
    try:
        data = await state.get_data()
        thread_name = data.get('thread_name')
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å thread_id –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if message.forward_from_chat:
            thread_id = message.message_thread_id or 0
        else:
            thread_id = int(message.text.strip())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_data = {}
        config_file = "chat_config.json"
        
        if os.path.exists(config_file):
            with open(config_file, 'r', encoding='utf-8') as f:
                config_data = json.load(f)
        
        if 'THREAD_IDS' not in config_data:
            config_data['THREAD_IDS'] = {}
        
        config_data['THREAD_IDS'][thread_name] = thread_id
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config_data, f, ensure_ascii=False, indent=2)
        
        thread_names = {
            "work_time": "–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
            "lk_processing": "–õ–ö - –û–±—Ä–∞–±–æ—Ç–∫–∞",
            "lk_problem": "–õ–ö - –ü—Ä–æ–±–ª–µ–º–∞",
            "epgu_accepted": "–ï–ü–ì–£ - –ü—Ä–∏–Ω—è—Ç–æ",
            "epgu_mail_queue": "–ï–ü–ì–£ - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã",
            "epgu_problem": "–ï–ü–ì–£ - –ü—Ä–æ–±–ª–µ–º–∞",
            "mail_confirmed": "–ü–æ—á—Ç–∞ - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
            "mail_rejected": "–ü–æ—á—Ç–∞ - –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            "problem_solved": "–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ",
            "problem_solved_queue": "–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
            "problem_in_progress": "–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º - –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω",
            "queue_updated": "–û—á–µ—Ä–µ–¥–∏ - –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–ª–µ–Ω–∏–π",
            "escalation": "–≠—Å–∫–∞–ª–∞—Ü–∏—è"
        }
        
        thread_display_name = thread_names.get(thread_name, thread_name)
        
        await message.answer(
            f"‚úÖ –¢—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {thread_display_name} (ID: {thread_id})\n\n"
            "–¢–µ–ø–µ—Ä—å —Å–æ–±—ã—Ç–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —Ç—Ä–µ–¥.",
            reply_markup=admin_thread_settings_keyboard()
        )
        await state.clear()
        
    except (ValueError, AttributeError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç—Ä–µ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–¥–∞.",
            reply_markup=cancel_keyboard
        )

# ===== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò =====

@router.callback_query(F.data == "admin_edit_employee_fio")
async def admin_edit_employee_fio(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if not await check_admin(callback.from_user.id):
        return
    
    await callback.message.edit_text(
        "‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û:",
        reply_markup=admin_employee_selection_keyboard("edit_fio")
    )

@router.callback_query(F.data == "admin_remove_employee")
async def admin_remove_employee_button(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    if not await check_admin(callback.from_user.id):
        return
    
    await callback.message.edit_text(
        "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=admin_employee_selection_keyboard("remove")
    )

@router.callback_query(F.data == "admin_remove_group")
async def admin_remove_group_button(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    if not await check_admin(callback.from_user.id):
        return
    
    await callback.message.edit_text(
        "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=admin_employee_selection_keyboard("remove_group")
    )

@router.callback_query(F.data == "admin_work_time_management")
async def admin_work_time_management(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏–º –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
    if not await check_admin(callback.from_user.id):
        return
    
    await callback.message.edit_text(
        "‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏–º –≤—Ä–µ–º–µ–Ω–µ–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_work_time_management_keyboard()
    )

@router.callback_query(F.data.startswith("admin_select_employee_"))
async def admin_select_employee(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    if not await check_admin(callback.from_user.id):
        return
    
    action = callback.data.replace("admin_select_employee_", "")
    employees = await get_all_employees()
    
    if not employees:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.",
            reply_markup=admin_staff_menu_keyboard()
        )
        return
    
    builder = InlineKeyboardBuilder()
    for emp in employees:
        btn_text = f"{emp.fio} ({emp.tg_id})"
        builder.button(text=btn_text, callback_data=f"admin_employee_{action}_{emp.id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_staff_menu")
    builder.adjust(1)
    
    action_names = {
        "edit_fio": "–∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û",
        "remove": "—É–¥–∞–ª–µ–Ω–∏—è",
        "remove_group": "—É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã",
        "start_work_day": "–Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è",
        "end_work_day": "–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"
    }
    
    await callback.message.edit_text(
        f"üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è {action_names.get(action, action)}:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("admin_employee_edit_fio_"))
async def admin_employee_edit_fio_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û"""
    if not await check_admin(callback.from_user.id):
        return
    
    employee_id = int(callback.data.replace("admin_employee_edit_fio_", ""))
    emp = await get_employee_by_id(employee_id)
    
    if not emp:
        await callback.message.edit_text(
            "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=admin_staff_menu_keyboard()
        )
        return
    
    await state.update_data(employee_id=employee_id, current_fio=emp.fio)
    await state.set_state(AdminStates.waiting_employee_fio_edit)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
        f"–¢–µ–∫—É—â–µ–µ –§–ò–û: {emp.fio}\n"
        f"Telegram ID: {emp.tg_id}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
        reply_markup=cancel_keyboard
    )

@router.message(AdminStates.waiting_employee_fio_edit)
async def admin_employee_edit_fio_process(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if not await check_admin(message.from_user.id):
        return
    
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_staff_menu_keyboard())
        return
    
    data = await state.get_data()
    employee_id = data.get("employee_id")
    current_fio = data.get("current_fio")
    new_fio = message.text.strip()
    
    if not new_fio:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û.", reply_markup=cancel_keyboard)
        return
    
    emp = await get_employee_by_id(employee_id)
    if not emp:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_staff_menu_keyboard())
        await state.clear()
        return
    
    success = await update_employee_fio(emp.tg_id, new_fio)
    if success:
        await message.answer(
            f"‚úÖ –§–ò–û –∏–∑–º–µ–Ω–µ–Ω–æ:\n"
            f"–ë—ã–ª–æ: {current_fio}\n"
            f"–°—Ç–∞–ª–æ: {new_fio}",
            reply_markup=admin_staff_menu_keyboard()
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û.",
            reply_markup=admin_staff_menu_keyboard()
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("admin_employee_remove_"))
async def admin_employee_remove_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not await check_admin(callback.from_user.id):
        return
    
    employee_id = int(callback.data.replace("admin_employee_remove_", ""))
    emp = await get_employee_by_id(employee_id)
    
    if not emp:
        await callback.message.edit_text(
            "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=admin_staff_menu_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_remove_{employee_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_staff_menu")]
    ])
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è\n\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp.fio}\n"
        f"Telegram ID: {emp.tg_id}\n"
        f"–ê–¥–º–∏–Ω: {'–î–∞' if emp.is_admin else '–ù–µ—Ç'}\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?",
        reply_markup=confirm_keyboard
    )

@router.callback_query(F.data.startswith("admin_confirm_remove_"))
async def admin_confirm_remove_employee(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if not await check_admin(callback.from_user.id):
        return
    
    employee_id = int(callback.data.replace("admin_confirm_remove_", ""))
    emp = await get_employee_by_id(employee_id)
    
    if not emp:
        await callback.message.edit_text(
            "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=admin_staff_menu_keyboard()
        )
        return
    
    try:
        await remove_employee(emp.tg_id)
        await callback.message.edit_text(
            f"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {emp.fio} ({emp.tg_id}) —É–¥–∞–ª–µ–Ω.",
            reply_markup=admin_staff_menu_keyboard()
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}",
            reply_markup=admin_staff_menu_keyboard()
        )

@router.callback_query(F.data.startswith("admin_employee_remove_group_"))
async def admin_employee_remove_group_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    if not await check_admin(callback.from_user.id):
        return
    
    employee_id = int(callback.data.replace("admin_employee_remove_group_", ""))
    emp = await get_employee_by_id(employee_id)
    
    if not emp:
        await callback.message.edit_text(
            "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=admin_staff_menu_keyboard()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    emp_with_groups = await get_employee_by_tg_id(emp.tg_id)
    if not emp_with_groups or not emp_with_groups.groups:
        await callback.message.edit_text(
            f"‚ùå –£ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {emp.fio} –Ω–µ—Ç –≥—Ä—É–ø–ø –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=admin_staff_menu_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    builder = InlineKeyboardBuilder()
    for group in emp_with_groups.groups:
        builder.button(text=f"‚ûñ {group.name}", callback_data=f"admin_remove_group_{emp.tg_id}_{group.name}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_staff_menu")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n"
        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp.fio}\n"
        f"–¢–µ–∫—É—â–∏–µ –≥—Ä—É–ø–ø—ã: {', '.join([g.name for g in emp_with_groups.groups])}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("admin_remove_group_"))
async def admin_remove_group_from_employee(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if not await check_admin(callback.from_user.id):
        return
    
    parts = callback.data.replace("admin_remove_group_", "").split("_")
    if len(parts) >= 2:
        tg_id = parts[0]
        group_name = "_".join(parts[1:])  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è –≥—Ä—É–ø–ø—ã
        
        emp = await get_employee_by_tg_id(tg_id)
        if not emp:
            await callback.message.edit_text(
                "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=admin_staff_menu_keyboard()
            )
            return
        
        try:
            await remove_group_from_employee(tg_id, group_name)
            await callback.message.edit_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ '{group_name}' —É–¥–∞–ª–µ–Ω–∞ —É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {emp.fio}.",
                reply_markup=admin_staff_menu_keyboard()
            )
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}",
                reply_markup=admin_staff_menu_keyboard()
            )

@router.callback_query(F.data == "admin_start_work_day")
async def admin_start_work_day_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
    if not await check_admin(callback.from_user.id):
        return
    
    await callback.message.edit_text(
        "‚ñ∂Ô∏è –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=admin_employee_selection_keyboard("start_work_day")
    )

@router.callback_query(F.data == "admin_end_work_day")
async def admin_end_work_day_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
    if not await check_admin(callback.from_user.id):
        return
    
    await callback.message.edit_text(
        "‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=admin_employee_selection_keyboard("end_work_day")
    )

@router.callback_query(F.data.startswith("admin_employee_start_work_day_"))
async def admin_employee_start_work_day(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if not await check_admin(callback.from_user.id):
        return
    
    employee_id = int(callback.data.replace("admin_employee_start_work_day_", ""))
    emp = await get_employee_by_id(employee_id)
    
    if not emp:
        await callback.message.edit_text(
            "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=admin_work_time_management_keyboard()
        )
        return
    
    work_day, message = await admin_start_work_day(employee_id)
    
    if work_day:
        await callback.message.edit_text(
            f"‚úÖ {message}\n\n"
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp.fio}\n"
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {work_day.start_time.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=admin_work_time_management_keyboard()
        )
    else:
        await callback.message.edit_text(
            f"‚ùå {message}",
            reply_markup=admin_work_time_management_keyboard()
        )

@router.callback_query(F.data.startswith("admin_employee_end_work_day_"))
async def admin_employee_end_work_day(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    if not await check_admin(callback.from_user.id):
        return
    
    employee_id = int(callback.data.replace("admin_employee_end_work_day_", ""))
    emp = await get_employee_by_id(employee_id)
    
    if not emp:
        await callback.message.edit_text(
            "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=admin_work_time_management_keyboard()
        )
        return
    
    work_day, message = await admin_end_work_day(employee_id)
    
    if work_day:
        total_hours = work_day.total_work_time or 0
        await callback.message.edit_text(
            f"‚úÖ {message}\n\n"
            f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {emp.fio}\n"
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {work_day.start_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {work_day.end_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {total_hours:.2f} —á–∞—Å–æ–≤",
            reply_markup=admin_work_time_management_keyboard()
        )
    else:
        await callback.message.edit_text(
            f"‚ùå {message}",
            reply_markup=admin_work_time_management_keyboard()
        ) 

@router.callback_query(F.data == "admin_clear_work_time")
async def admin_clear_work_time(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if not await check_admin(callback.from_user.id):
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_confirm_clear_work_time")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_work_time_management")]
    ])
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è—Ö –∏ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n"
        "–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=confirm_keyboard
    )

@router.callback_query(F.data == "admin_confirm_clear_work_time")
async def admin_confirm_clear_work_time(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if not await check_admin(callback.from_user.id):
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    await callback.message.edit_text("üóëÔ∏è –û—á–∏—â–∞—é –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        result = await clear_work_time_data()
        
        if result["success"]:
            await callback.message.edit_text(
                f"‚úÖ {result['message']}\n\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π: {result['work_days_deleted']}\n"
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {result['breaks_deleted']}\n\n"
                f"–î–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.",
                reply_markup=admin_work_time_management_keyboard()
            )
        else:
            await callback.message.edit_text(
                f"‚ùå {result['message']}",
                reply_markup=admin_work_time_management_keyboard()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}",
            reply_markup=admin_work_time_management_keyboard()
        )
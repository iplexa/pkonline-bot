from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from db.crud import (
    get_next_epgu_application, 
    update_application_status, 
    update_application_queue_type,
    postpone_application,
    get_employee_by_tg_id, 
    has_access, 
    return_application_to_queue, 
    increment_processed_applications,
    update_application_field,
    get_application_by_id,
    get_applications_by_fio_and_queue,
    escalate_application,
    get_moscow_now,
    get_queue_statistics
)
from db.models import ApplicationStatusEnum, EPGUActionEnum
from keyboards.epgu import epgu_queue_keyboard, epgu_decision_keyboard, epgu_reason_keyboard, epgu_escalate_keyboard, epgu_search_results_keyboard
from keyboards.main import main_menu_keyboard
from config import ADMIN_CHAT_ID
from utils.logger import get_logger
import logging

logger = logging.getLogger(__name__)

router = Router()

class EPGUStates(StatesGroup):
    waiting_decision = State()
    waiting_reason = State()
    waiting_search_fio = State()

@router.callback_query(F.data == "epgu_menu")
async def epgu_menu_entry(callback: CallbackQuery, state: FSMContext):
    try:
        emp = await get_employee_by_tg_id(str(callback.from_user.id))
        if not emp or not await has_access(str(callback.from_user.id), "epgu"):
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ï–ü–ì–£
        stats = await get_queue_statistics("epgu")
        
        text = "üèõÔ∏è <b>–û—á–µ—Ä–µ–¥—å –ï–ü–ì–£</b>\n\n"
        
        if stats:
            text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: <b>{stats.get('queued', 0)}</b>\n"
            text += f"üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: <b>{stats.get('in_progress', 0)}</b>\n"
            text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: <b>{stats.get('accepted', 0)}</b>\n"
            text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{stats.get('rejected', 0)}</b>\n"
            text += f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: <b>{stats.get('problem', 0)}</b>\n\n"
        
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await callback.message.edit_text(
            text, 
            reply_markup=epgu_decision_keyboard(menu=True),
            parse_mode="HTML"
        )
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        print(traceback.format_exc())

@router.callback_query(F.data == "epgu_next")
async def get_epgu_application(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await has_access(str(callback.from_user.id), "epgu"):
        return
    app = await get_next_epgu_application(employee_id=emp.id, bot=callback.bot)
    if not app:
        await callback.message.edit_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.", reply_markup=epgu_queue_keyboard(menu=True))
        return
    await state.update_data(app_id=app.id)
    await callback.message.edit_text(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ: {app.fio}", reply_markup=epgu_decision_keyboard(menu=False))
    await state.set_state(EPGUStates.waiting_decision)

@router.callback_query(EPGUStates.waiting_decision, F.data.in_([
    "accept_epgu", "epgu_signature", "epgu_signature_scans", "epgu_scans", "epgu_error", "return_epgu"
]))
async def process_epgu_decision(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await has_access(str(callback.from_user.id), "epgu"):
        return
    data = await state.get_data()
    app_id = data.get("app_id")
    employee_id = emp.id if emp else None

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –ï–ü–ì–£: {callback.data} –¥–ª—è app_id={app_id}, employee_id={employee_id}")

    if callback.data == "accept_epgu":
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–∏–Ω—è—Ç–æ —Å—Ä–∞–∑—É
        await update_application_status(app_id, ApplicationStatusEnum.ACCEPTED, employee_id=employee_id)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –ï–ü–ì–£
        await update_application_field(app_id, "epgu_action", EPGUActionEnum.ACCEPTED.value)
        await update_application_field(app_id, "epgu_processor_id", employee_id)
        result = await increment_processed_applications(employee_id)
        logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ï–ü–ì–£ –ø—Ä–∏–Ω—è—Ç–æ: app_id={app_id}, increment_result={result}")
        await callback.message.edit_text("–ó–∞—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.", reply_markup=epgu_decision_keyboard(menu=True))
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        telegram_logger = get_logger()
        if telegram_logger:
            app = await get_application_by_id(app_id)
            if app:
                await telegram_logger.log_epgu_accepted(emp.fio, app_id, app.fio)
        
        await callback.bot.send_message(ADMIN_CHAT_ID, f"–ï–ü–ì–£: {callback.from_user.full_name} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ {app_id}")
        await state.clear()

    elif callback.data == "epgu_signature":
        # –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å—Ç—å —Å–∫–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥–ø–∏—Å—å (–≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã)
        await update_application_queue_type(app_id, "epgu_mail", employee_id=employee_id)
        await update_application_field(app_id, "epgu_action", EPGUActionEnum.HAS_SCANS.value)
        await update_application_field(app_id, "epgu_processor_id", employee_id)
        await update_application_field(app_id, "needs_scans", False)
        await update_application_field(app_id, "needs_signature", True)
        await update_application_field(app_id, "scans_confirmed", True)
        await update_application_field(app_id, "signature_confirmed", False)
        result = await increment_processed_applications(employee_id)
        logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ï–ü–ì–£ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–¥–ø–∏—Å—å (–µ—Å—Ç—å —Å–∫–∞–Ω—ã): app_id={app_id}, increment_result={result}")
        await callback.message.edit_text("–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏.", reply_markup=epgu_decision_keyboard(menu=True))
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        telegram_logger = get_logger()
        if telegram_logger:
            app = await get_application_by_id(app_id)
            if app:
                await telegram_logger.log_epgu_mail_queue(emp.fio, app_id, app.fio, "–ü–æ–¥–ø–∏—Å—å (–µ—Å—Ç—å —Å–∫–∞–Ω—ã)")
        
        await callback.bot.send_message(ADMIN_CHAT_ID, f"–ï–ü–ì–£: {callback.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ {app_id} –Ω–∞ –ø–æ–¥–ø–∏—Å—å (–µ—Å—Ç—å —Å–∫–∞–Ω—ã)")
        await state.clear()

    elif callback.data == "epgu_signature_scans":
        # –í–∞—Ä–∏–∞–Ω—Ç 3: –ù–µ—Ç —Å–∫–∞–Ω–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥–ø–∏—Å—å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–∫–∞–Ω—ã (–≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã)
        await update_application_queue_type(app_id, "epgu_mail", employee_id=employee_id)
        await update_application_field(app_id, "epgu_action", EPGUActionEnum.NO_SCANS.value)
        await update_application_field(app_id, "epgu_processor_id", employee_id)
        await update_application_field(app_id, "needs_scans", True)
        await update_application_field(app_id, "needs_signature", True)
        await update_application_field(app_id, "scans_confirmed", False)
        await update_application_field(app_id, "signature_confirmed", False)
        result = await increment_processed_applications(employee_id)
        logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ï–ü–ì–£ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–¥–ø–∏—Å—å –∏ –∑–∞–ø—Ä–æ—Å —Å–∫–∞–Ω–æ–≤: app_id={app_id}, increment_result={result}")
        await callback.message.edit_text("–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–∫–∞–Ω–æ–≤.", reply_markup=epgu_decision_keyboard(menu=True))
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        telegram_logger = get_logger()
        if telegram_logger:
            app = await get_application_by_id(app_id)
            if app:
                await telegram_logger.log_epgu_mail_queue(emp.fio, app_id, app.fio, "–ü–æ–¥–ø–∏—Å—å –∏ –∑–∞–ø—Ä–æ—Å —Å–∫–∞–Ω–æ–≤")
        
        await callback.bot.send_message(ADMIN_CHAT_ID, f"–ï–ü–ì–£: {callback.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ {app_id} –Ω–∞ –ø–æ–¥–ø–∏—Å—å –∏ –∑–∞–ø—Ä–æ—Å —Å–∫–∞–Ω–æ–≤")
        await state.clear()

    elif callback.data == "epgu_scans":
        # –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Å–∫–∞–Ω—ã, –ø–æ–¥–ø–∏—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        await update_application_queue_type(app_id, "epgu_mail", employee_id=employee_id)
        await update_application_field(app_id, "epgu_action", EPGUActionEnum.ONLY_SCANS.value)
        await update_application_field(app_id, "epgu_processor_id", employee_id)
        await update_application_field(app_id, "needs_scans", True)
        await update_application_field(app_id, "needs_signature", False)
        await update_application_field(app_id, "scans_confirmed", False)
        await update_application_field(app_id, "signature_confirmed", True)
        result = await increment_processed_applications(employee_id)
        logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ï–ü–ì–£ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã (—Ç–æ–ª—å–∫–æ —Å–∫–∞–Ω—ã): app_id={app_id}, increment_result={result}")
        await callback.message.edit_text("–ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–∞–Ω–æ–≤ (–ø–æ–¥–ø–∏—Å—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è).", reply_markup=epgu_decision_keyboard(menu=True))
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        telegram_logger = get_logger()
        if telegram_logger:
            app = await get_application_by_id(app_id)
            if app:
                await telegram_logger.log_epgu_mail_queue(emp.fio, app_id, app.fio, "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∞–Ω–æ–≤")
        
        await callback.bot.send_message(ADMIN_CHAT_ID, f"–ï–ü–ì–£: {callback.from_user.full_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ {app_id} –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–∞–Ω–æ–≤ (–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏)")
        await state.clear()

    elif callback.data == "epgu_error":
        # –í–∞—Ä–∏–∞–Ω—Ç 4: –û—à–∏–±–∫–∞ ‚Äî –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É
        await state.set_state(EPGUStates.waiting_reason)
        await state.update_data(decision="epgu_error")
        await callback.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏:", reply_markup=epgu_reason_keyboard())

    elif callback.data == "return_epgu":
        # –í–µ—Ä–Ω—É—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å
        await return_application_to_queue(app_id)
        await callback.message.edit_text("–ó–∞—è–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.", reply_markup=epgu_decision_keyboard(menu=True))
        await state.clear()

@router.callback_query(EPGUStates.waiting_reason, F.data == "epgu_cancel_reason")
async def cancel_epgu_reason(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    app_id = data.get("app_id")
    if app_id:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=epgu_decision_keyboard(menu=False)
        )
        await state.set_state(EPGUStates.waiting_decision)
    else:
        await callback.message.edit_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=epgu_queue_keyboard(menu=True)
        )
        await state.clear()

@router.message(EPGUStates.waiting_reason)
async def process_epgu_reason(message: Message, state: FSMContext):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    if not emp or not await has_access(str(message.from_user.id), "epgu"):
        return
    data = await state.get_data()
    app_id = data.get("app_id")
    decision = data.get("decision")
    employee_id = emp.id if emp else None
    reason = message.text
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –ï–ü–ì–£: decision={decision}, app_id={app_id}, employee_id={employee_id}")
    
    if decision == "epgu_error":
        # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–æ–±–ª–µ–º
        await update_application_queue_type(app_id, "epgu_problem", employee_id=employee_id, reason=reason)
        result = await increment_processed_applications(employee_id)
        logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ï–ü–ì–£ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ: app_id={app_id}, increment_result={result}")
        
        await message.answer(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ. –ü—Ä–∏—á–∏–Ω–∞: {reason}", reply_markup=epgu_decision_keyboard(menu=True))
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        telegram_logger = get_logger()
        if telegram_logger:
            app = await get_application_by_id(app_id)
            if app:
                await telegram_logger.log_epgu_problem(emp.fio, app_id, app.fio, reason)
        
        await message.bot.send_message(ADMIN_CHAT_ID, f"–ï–ü–ì–£: {message.from_user.full_name} –ø–æ–º–µ—Ç–∏–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ {app_id} –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        await state.clear()

@router.callback_query(EPGUStates.waiting_decision, F.data == "main_menu")
async def block_menu_exit_during_processing(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ!", show_alert=True)

@router.callback_query(F.data == "epgu_search_fio")
async def epgu_search_fio_start(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await has_access(str(callback.from_user.id), "epgu"):
        return
    
    await state.set_state(EPGUStates.waiting_search_fio)
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –∑–∞—è–≤–ª–µ–Ω–∏–π –ï–ü–ì–£</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π.\n"
        "–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä—ã: –ò–≤–∞–Ω–æ–≤, –ò–≤–∞–Ω, –ò–≤–∞–Ω–æ–≤ –ò.–ò.</i>",
        reply_markup=epgu_decision_keyboard(menu=True),
        parse_mode="HTML"
    )

@router.message(EPGUStates.waiting_search_fio)
async def epgu_search_fio_process(message: Message, state: FSMContext):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    if not emp or not await has_access(str(message.from_user.id), "epgu"):
        return
    
    fio = message.text.strip()
    if not fio:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )
        return
    
    # –ü–æ–∏—Å–∫ –∑–∞—è–≤–ª–µ–Ω–∏–π
    apps = await get_applications_by_fio_and_queue(fio, "epgu")
    
    if not apps:
        await message.answer(
            f"üîç <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '<code>{fio}</code>' –∑–∞—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            f"<i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.</i>",
            reply_markup=epgu_search_results_keyboard(fio, 0),
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –°—Ç–∞—Ç—É—Å —ç–º–æ–¥–∑–∏
    status_emoji = {
        'queued': '‚è≥',
        'in_progress': 'üîÑ',
        'accepted': '‚úÖ',
        'rejected': '‚ùå',
        'problem': '‚ö†Ô∏è'
    }
    
    # –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç
    status_text = {
        'queued': '–í –æ—á–µ—Ä–µ–¥–∏',
        'in_progress': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'accepted': '–ü—Ä–∏–Ω—è—Ç–æ',
        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
        'problem': '–ü—Ä–æ–±–ª–µ–º–Ω–æ–µ'
    }
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–ª–µ–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ
    queued_apps = [app for app in apps if app.status.value == 'queued']
    other_apps = [app for app in apps if app.status.value != 'queued']
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ–¥–∞—á–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    queued_apps.sort(key=lambda x: x.submitted_at, reverse=True)
    other_apps.sort(key=lambda x: x.submitted_at, reverse=True)
    
    sorted_apps = queued_apps + other_apps
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    summary_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
    summary_text += f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '<code>{fio}</code>' –Ω–∞–π–¥–µ–Ω–æ <b>{len(apps)}</b> –∑–∞—è–≤–ª–µ–Ω–∏–π:\n\n"
    
    queued_count = len(queued_apps)
    in_progress_count = len([app for app in apps if app.status.value == 'in_progress'])
    completed_count = len([app for app in apps if app.status.value in ['accepted', 'rejected']])
    problem_count = len([app for app in apps if app.status.value == 'problem'])
    
    if queued_count > 0:
        summary_text += f"‚è≥ –í –æ—á–µ—Ä–µ–¥–∏: <b>{queued_count}</b>\n"
    if in_progress_count > 0:
        summary_text += f"üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: <b>{in_progress_count}</b>\n"
    if completed_count > 0:
        summary_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: <b>{completed_count}</b>\n"
    if problem_count > 0:
        summary_text += f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ: <b>{problem_count}</b>\n"
    
    await message.answer(
        summary_text,
        reply_markup=epgu_search_results_keyboard(fio, len(apps)),
        parse_mode="HTML"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞—è–≤–ª–µ–Ω–∏—é
    for i, app in enumerate(sorted_apps, 1):
        text = f"üèõÔ∏è <b>–ó–∞—è–≤–ª–µ–Ω–∏–µ –ï–ü–ì–£ #{app.id}</b> ({i}/{len(sorted_apps)})\n\n"
        text += f"üë®‚Äçüíº <b>–§–ò–û:</b> {app.fio}\n"
        text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji.get(app.status.value, '‚ùì')} {status_text.get(app.status.value, app.status.value)}\n"
        
        if app.is_priority:
            text += "üö® <b>–ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï</b>\n"
        
        if app.status_reason:
            text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason}\n"
        
        if app.processed_by:
            text += f"üë§ <b>–û–±—Ä–∞–±–æ—Ç–∞–ª:</b> {app.processed_by.fio}\n"
        
        if app.processed_at:
            text += f"‚è∞ <b>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {app.processed_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        text += f"\nüîç <b>–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b> '<code>{fio}</code>'"
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"DEBUG: –ó–∞—è–≤–ª–µ–Ω–∏–µ {app.id}, —Å—Ç–∞—Ç—É—Å: {app.status.value}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {app.is_priority}")
        
        await message.answer(
            text, 
            reply_markup=epgu_escalate_keyboard(app.id, app.is_priority, app.status.value), 
            parse_mode="HTML"
        )
    
    await state.clear()

@router.callback_query(F.data == "epgu_search_info")
async def epgu_search_info_handler(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ"""
    await callback.answer(
        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∏—Å–∫–µ\n\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –§–ò–û\n"
        "‚Ä¢ –ó–∞—è–≤–ª–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è: —Å–Ω–∞—á–∞–ª–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ '–í –æ—á–µ—Ä–µ–¥–∏' –∏ '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'\n"
        "‚Ä¢ –ï—Å–ª–∏ –∑–∞—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏",
        show_alert=True
    )

@router.callback_query(F.data.startswith("epgu_escalate_"))
async def epgu_escalate_handler(callback: CallbackQuery):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await has_access(str(callback.from_user.id), "epgu"):
        return
    
    app_id = int(callback.data.replace("epgu_escalate_", ""))
    app = await get_application_by_id(app_id)
    
    if not app:
        await callback.message.edit_text(
            "‚ùå –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ï–ü–ì–£
    if app.queue_type != "epgu":
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ï–ü–ì–£.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ (–Ω–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ)
    if app.status != ApplicationStatusEnum.QUEUED:
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ
    if app.is_priority:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–µ–ª—å–∑—è —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Å–∫–∞–ª–∞—Ü–∏—é
    success = await escalate_application(app_id)
    
    if success:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        telegram_logger = get_logger()
        if telegram_logger:
            await telegram_logger.log_escalation(app.id, app.queue_type, emp.fio, reason="–≠—Å–∫–∞–ª–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ –ø–æ –§–ò–û")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        text = f"üö® <b>–ó–∞—è–≤–ª–µ–Ω–∏–µ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–æ</b>\n\n"
        text += f"üÜî <b>ID:</b> {app.id}\n"
        text += f"üë®‚Äçüíº <b>–§–ò–û:</b> {app.fio}\n"
        text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"üë§ <b>–≠—Å–∫–∞–ª–∏—Ä–æ–≤–∞–ª:</b> {emp.fio}\n"
        text += f"‚è∞ <b>–í—Ä–µ–º—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏:</b> {get_moscow_now().strftime('%d.%m.%Y %H:%M')}\n\n"
        text += f"‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å."
        
        await callback.message.edit_text(
            text,
            reply_markup=epgu_decision_keyboard(menu=True),
            parse_mode="HTML"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await callback.bot.send_message(
            ADMIN_CHAT_ID, 
            f"üö® –ï–ü–ì–£: {callback.from_user.full_name} —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ {app_id} ({app.fio})"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )

@router.callback_query(F.data.startswith("epgu_process_found_"))
async def epgu_process_found_application(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await has_access(str(callback.from_user.id), "epgu"):
        return
    
    app_id = int(callback.data.replace("epgu_process_found_", ""))
    app = await get_application_by_id(app_id)
    
    if not app:
        await callback.message.edit_text(
            "‚ùå –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ï–ü–ì–£
    if app.queue_type != "epgu":
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –ï–ü–ì–£.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    if app.status not in [ApplicationStatusEnum.QUEUED, ApplicationStatusEnum.IN_PROGRESS]:
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–ª–∏ –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )
        return
    
    # –ï—Å–ª–∏ –∑–∞—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏ –µ–≥–æ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π
    if app.status == ApplicationStatusEnum.IN_PROGRESS and app.processed_by_id and app.processed_by_id != emp.id:
        # –ó–∞—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
        await callback.message.edit_text(
            f"‚ùå –≠—Ç–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º {app.processed_by.fio}.\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.",
            reply_markup=epgu_decision_keyboard(menu=True)
        )
        return
    
    # –ë–µ—Ä–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É (–µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ)
    if app.status == ApplicationStatusEnum.QUEUED:
        await update_application_status(app_id, ApplicationStatusEnum.IN_PROGRESS, employee_id=emp.id)
        await update_application_field(app_id, "taken_at", get_moscow_now())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.update_data(app_id=app_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–ª–µ–Ω–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
    text = f"üîÑ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ï–ü–ì–£</b>\n\n"
    text += f"üÜî <b>ID:</b> {app.id}\n"
    text += f"üë®‚Äçüíº <b>–§–ò–û:</b> {app.fio}\n"
    text += f"üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
    text += f"üë§ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:</b> {emp.fio}\n"
    
    if app.status == ApplicationStatusEnum.QUEUED:
        text += f"‚è∞ <b>–í–∑—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É:</b> {get_moscow_now().strftime('%d.%m.%Y %H:%M')}\n"
    else:
        text += f"‚è∞ <b>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å:</b> {app.taken_at.strftime('%d.%m.%Y %H:%M') if app.taken_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
    
    if app.is_priority:
        text += "üö® <b>–ü–†–ò–û–†–ò–¢–ï–¢–ù–û–ï</b>\n"
    
    if app.status_reason:
        text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason}\n"
    
    text += f"\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
    
    await callback.message.edit_text(
        text, 
        reply_markup=epgu_decision_keyboard(menu=False), 
        parse_mode="HTML"
    )
    await state.set_state(EPGUStates.waiting_decision) 
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from db.crud import (
    get_applications_by_fio_and_queue,
    update_application_status,
    get_employee_by_tg_id, 
    employee_has_group, 
    increment_processed_applications
)
from db.models import ApplicationStatusEnum
from keyboards.mail import mail_menu_keyboard, mail_search_keyboard, mail_confirm_keyboard
from keyboards.main import main_menu_keyboard
from config import ADMIN_CHAT_ID
import logging

logger = logging.getLogger(__name__)

router = Router()

class MailStates(StatesGroup):
    waiting_fio_search = State()
    waiting_confirm = State()

@router.callback_query(F.data == "mail_menu")
async def mail_menu_entry(callback: CallbackQuery, state: FSMContext):
    try:
        emp = await get_employee_by_tg_id(str(callback.from_user.id))
        if not emp or not await employee_has_group(str(callback.from_user.id), "mail"):
            return
        await callback.message.edit_text(
            "üìÆ –û—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã. –ó–¥–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –ø–æ –§–ò–û.",
            reply_markup=mail_menu_keyboard()
        )
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        print(traceback.format_exc())

@router.callback_query(F.data == "mail_search_fio")
async def mail_search_fio_start(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await employee_has_group(str(callback.from_user.id), "mail"):
        return
    await state.set_state(MailStates.waiting_fio_search)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—á—Ç—ã:",
        reply_markup=mail_search_keyboard()
    )

@router.message(MailStates.waiting_fio_search)
async def mail_search_fio_process(message: Message, state: FSMContext):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    if not emp or not await employee_has_group(str(message.from_user.id), "mail"):
        return
    fio = message.text.strip()
    if not fio:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è.")
        return
    applications = await get_applications_by_fio_and_queue(fio, "epgu_mail")
    if not applications:
        await message.answer(
            f"–ó–∞—è–≤–ª–µ–Ω–∏—è –¥–ª—è '{fio}' –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—á—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=mail_menu_keyboard()
        )
        await state.clear()
        return
    if len(applications) == 1:
        app = applications[0]
        await state.update_data(app_id=app.id, fio=fio)
        await state.set_state(MailStates.waiting_confirm)
        await message.answer(
            f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ:\n\n"
            f"–§–ò–û: {app.fio}\n"
            f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"ID: {app.id}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:",
            reply_markup=mail_confirm_keyboard()
        )
    else:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–ª–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        text = f"üìã –ù–∞–π–¥–µ–Ω–æ {len(applications)} –∑–∞—è–≤–ª–µ–Ω–∏–π –¥–ª—è '{fio}':\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ:" 
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{i+1}. {app.submitted_at.strftime('%d.%m.%Y %H:%M')}", callback_data=f"mail_select_{app.id}")]
                for i, app in enumerate(applications)
            ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mail_back_to_menu")]]
        )
        await state.update_data(applications=[{"id": app.id, "fio": app.fio, "submitted_at": app.submitted_at.strftime('%d.%m.%Y %H:%M')} for app in applications], fio=fio)
        await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("mail_select_"))
async def mail_select_callback(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await employee_has_group(str(callback.from_user.id), "mail"):
        return
    app_id = int(callback.data.replace("mail_select_", ""))
    data = await state.get_data()
    applications = data.get("applications", [])
    fio = data.get("fio", "")
    app = next((a for a in applications if a["id"] == app_id), None)
    if not app:
        await callback.answer("–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    await state.update_data(app_id=app_id, applications=None)
    await state.set_state(MailStates.waiting_confirm)
    await callback.message.edit_text(
        f"üìã –í—ã–±—Ä–∞–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ:\n\n"
        f"–§–ò–û: {app['fio']}\n"
        f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {app['submitted_at']}\n"
        f"ID: {app['id']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:",
        reply_markup=mail_confirm_keyboard()
    )

@router.message(MailStates.waiting_confirm)
async def mail_confirm_process(message: Message, state: FSMContext):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    if not emp or not await employee_has_group(str(message.from_user.id), "mail"):
        return
    
    data = await state.get_data()
    app_id = data.get("app_id")
    applications = data.get("applications")
    fio = data.get("fio")
    
    if app_id:
        # –û–¥–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        if message.text.lower() in ["–¥–∞", "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–≥–æ—Ç–æ–≤–æ"]:
            await update_application_status(app_id, ApplicationStatusEnum.ACCEPTED, employee_id=emp.id)
            result = await increment_processed_applications(emp.id)
            logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: app_id={app_id}, increment_result={result}")
            await message.answer(
                f"‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ {app_id} ({fio}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n"
                f"–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
                reply_markup=mail_menu_keyboard()
            )
            await message.bot.send_message(
                ADMIN_CHAT_ID, 
                f"üìÆ –ü–æ—á—Ç–∞: {message.from_user.full_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å—å –∑–∞—è–≤–ª–µ–Ω–∏—è {app_id} ({fio})"
            )
        else:
            await message.answer(
                "–û—Ç–º–µ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—á—Ç—ã.",
                reply_markup=mail_menu_keyboard()
            )
        await state.clear()
    elif applications:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–ª–µ–Ω–∏–π - –≤—ã–±–∏—Ä–∞–µ–º –ø–æ –Ω–æ–º–µ—Ä—É
        try:
            choice = int(message.text.strip())
            if 1 <= choice <= len(applications):
                app = applications[choice - 1]
                await state.update_data(app_id=app.id, applications=None)
                await message.answer(
                    f"üìã –í—ã–±—Ä–∞–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ:\n\n"
                    f"–§–ò–û: {app.fio}\n"
                    f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"ID: {app.id}\n\n"
                    f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:",
                    reply_markup=mail_confirm_keyboard()
                )
            else:
                await message.answer(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(applications)}.",
                    reply_markup=mail_search_keyboard()
                )
        except ValueError:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–ª–µ–Ω–∏—è (—á–∏—Å–ª–æ).",
                reply_markup=mail_search_keyboard()
            )

@router.callback_query(F.data == "mail_back_to_menu")
async def mail_back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await mail_menu_entry(callback, state) 
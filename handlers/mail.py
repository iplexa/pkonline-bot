from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from db.crud import (
    get_applications_by_fio_and_queue,
    update_application_status,
    get_employee_by_tg_id, 
    has_access, 
    increment_processed_applications,
    update_application_field,
    return_application_to_queue,
    get_application_by_id,
    get_applications_by_email_and_queue
)
from db.models import ApplicationStatusEnum
from keyboards.mail import mail_menu_keyboard, mail_search_keyboard, mail_confirm_keyboard, mail_fio_search_keyboard
from keyboards.main import main_menu_keyboard
from config import ADMIN_CHAT_ID
from utils.logger import get_logger
import logging

logger = logging.getLogger(__name__)

router = Router()

class MailStates(StatesGroup):
    waiting_fio_search = State()
    waiting_confirm = State()
    waiting_fio_info = State()
    waiting_scans = State()
    waiting_signature = State()

@router.callback_query(F.data == "mail_menu")
async def mail_menu_entry(callback: CallbackQuery, state: FSMContext):
    try:
        emp = await get_employee_by_tg_id(str(callback.from_user.id))
        if not emp or not await has_access(str(callback.from_user.id), "mail"):
            return
        await callback.message.edit_text(
            "üìÆ –û—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã. –ó–¥–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –§–ò–û –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏–π.",
            reply_markup=mail_menu_keyboard()
        )
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
        import traceback
        print(traceback.format_exc())



@router.callback_query(F.data == "mail_search_fio")
async def mail_search_fio_start(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await has_access(str(callback.from_user.id), "mail"):
        return
    await state.set_state(MailStates.waiting_fio_search)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û <b>–∏–ª–∏ email</b> –∑–∞—è–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—á—Ç—ã:",
        reply_markup=mail_search_keyboard(),
        parse_mode="HTML"
    )

@router.message(MailStates.waiting_fio_search)
async def mail_search_fio_process(message: Message, state: FSMContext):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    if not emp or not await has_access(str(message.from_user.id), "mail"):
        return
    fio = message.text.strip()
    if not fio:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∏–ª–∏ email –∑–∞—è–≤–∏—Ç–µ–ª—è.")
        return
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: –µ—Å–ª–∏ email ‚Äî –∏—â–µ–º –ø–æ email, –∏–Ω–∞—á–µ –ø–æ –§–ò–û
    if "@" in fio and "." in fio:
        all_applications = await get_applications_by_email_and_queue(fio, "epgu_mail")
        search_type = "email"
    else:
        all_applications = await get_applications_by_fio_and_queue(fio, "epgu_mail")
        search_type = "–§–ò–û"
    if not all_applications:
        # –ï—Å–ª–∏ –∏—Å–∫–∞–ª–∏ –ø–æ –§–ò–û ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –§–ò–û
        if search_type == "–§–ò–û" and len(fio) >= 3:
            similar_apps = await get_applications_by_fio_and_queue(fio[:3], "epgu_mail")
            if similar_apps:
                unique_fios = sorted(set(app.fio for app in similar_apps))
                text = f"–ó–∞—è–≤–ª–µ–Ω–∏—è –¥–ª—è '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n" + '\n'.join(unique_fios)
                await message.answer(text, reply_markup=mail_menu_keyboard())
                await state.clear()
                return
        await message.answer(
            f"–ó–∞—è–≤–ª–µ–Ω–∏—è –¥–ª—è '{fio}' –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—á—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=mail_menu_keyboard()
        )
        await state.clear()
        return
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è
    applications = [app for app in all_applications if app.status != ApplicationStatusEnum.ACCEPTED]
    if not applications:
        await message.answer(
            f"–£ –∑–∞—è–≤–∏—Ç–µ–ª—è '{fio}' –≤—Å–µ –∑–∞—è–≤–ª–µ–Ω–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.",
            reply_markup=mail_menu_keyboard()
        )
        await state.clear()
        return
    if len(applications) == 1:
        app = applications[0]
        await state.update_data(app_id=app.id, fio=fio)
        await state.set_state(MailStates.waiting_confirm)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        doc_list = []
        if getattr(app, 'needs_signature', False):
            doc_list.append("–ü–æ–¥–ø–∏—Å—å")
        if getattr(app, 'needs_scans', False):
            doc_list.append("–°–∫–∞–Ω—ã")
        doc_text = ", ".join(doc_list) if doc_list else "-"
        epgu_operator = getattr(app, 'epgu_processor', None)
        epgu_fio = epgu_operator.fio if epgu_operator and hasattr(epgu_operator, 'fio') else "-"
        await message.answer(
            f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ:\n\n"
            f"–§–ò–û: {app.fio}\n"
            f"Email: {app.email or '-'}\n"
            f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"ID: {app.id}\n"
            f"–ù—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å: {doc_text}\n"
            f"–û–±—Ä–∞–±–æ—Ç–∞–ª –≤ –ï–ü–ì–£: {epgu_fio}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏:",
            reply_markup=mail_confirm_keyboard()
        )
    else:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–ª–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        text = f"üìã –ù–∞–π–¥–µ–Ω–æ {len(applications)} –∑–∞—è–≤–ª–µ–Ω–∏–π –¥–ª—è '{fio}' ({search_type}):\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ:"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=f"{i+1}. {app.submitted_at.strftime('%d.%m.%Y %H:%M')} | {app.email or '-'}", callback_data=f"mail_select_{app.id}")]
                for i, app in enumerate(applications)
            ] + [[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mail_back_to_menu")]]
        )
        await state.update_data(applications=[{"id": app.id, "fio": app.fio, "submitted_at": app.submitted_at.strftime('%d.%m.%Y %H:%M'), "email": app.email} for app in applications], fio=fio)
        await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("mail_select_"))
async def mail_select_callback(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await has_access(str(callback.from_user.id), "mail"):
        return
    app_id = int(callback.data.replace("mail_select_", ""))
    data = await state.get_data()
    applications = data.get("applications", [])
    fio = data.get("fio", "")
    app = next((a for a in applications if a["id"] == app_id), None)
    if not app:
        await callback.answer("–ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return
    await state.update_data(app_id=app_id, applications=None)
    await state.set_state(MailStates.waiting_confirm)
    await callback.message.edit_text(
        f"üìã –í—ã–±—Ä–∞–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ:\n\n"
        f"–§–ò–û: {app['fio']}\n"
        f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {app['submitted_at']}\n"
        f"ID: {app['id']}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:",
        reply_markup=mail_confirm_keyboard()
    )

@router.message(MailStates.waiting_confirm)
async def mail_confirm_process(message: Message, state: FSMContext):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    if not emp or not await has_access(str(message.from_user.id), "mail"):
        return
    data = await state.get_data()
    app_id = data.get("app_id")
    fio = data.get("fio")
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ
    from db.crud import get_application_by_id
    app = await get_application_by_id(app_id)
    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å–∫–∞–Ω—ã ‚Äî —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö
    if getattr(app, 'needs_scans', False) and not getattr(app, 'scans_confirmed', False):
        await state.set_state(MailStates.waiting_scans)
        await message.answer(
            f"–¢—Ä–µ–±—É—é—Ç—Å—è —Å–∫–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –í—Å–µ —Å–∫–∞–Ω—ã –≤ –Ω–∞–ª–∏—á–∏–∏? (–¥–∞/–Ω–µ—Ç)",
            reply_markup=mail_confirm_keyboard()
        )
        return
    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—å ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å
    if getattr(app, 'needs_signature', False) and not getattr(app, 'signature_confirmed', False):
        await state.set_state(MailStates.waiting_signature)
        await message.answer(
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å. –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã? (–¥–∞/–Ω–µ—Ç)",
            reply_markup=mail_confirm_keyboard()
        )
        return
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º
    await update_application_status(app_id, ApplicationStatusEnum.ACCEPTED, employee_id=emp.id)
    await update_application_field(app_id, "scans_confirmed", True)
    await update_application_field(app_id, "signature_confirmed", True)
    result = await increment_processed_applications(emp.id)
    logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: app_id={app_id}, increment_result={result}")
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ {app_id} ({fio}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏.",
        reply_markup=mail_menu_keyboard()
    )
    await message.bot.send_message(
        ADMIN_CHAT_ID, 
        f"üìÆ –ü–æ—á—Ç–∞: {message.from_user.full_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ {app_id} ({fio})"
    )
    await state.clear()

@router.message(MailStates.waiting_scans)
async def mail_scans_process(message: Message, state: FSMContext):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    data = await state.get_data()
    app_id = data.get("app_id")
    fio = data.get("fio")
    answer = message.text.strip().lower()
    if answer in ["–¥–∞", "–µ—Å—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–≥–æ—Ç–æ–≤–æ"]:
        await update_application_field(app_id, "scans_confirmed", True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å—å
        from db.crud import get_application_by_id
        app = await get_application_by_id(app_id)
        if getattr(app, 'needs_signature', False) and not getattr(app, 'signature_confirmed', False):
            await state.set_state(MailStates.waiting_signature)
            await message.answer(
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—å. –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã? (–¥–∞/–Ω–µ—Ç)",
                reply_markup=mail_confirm_keyboard()
            )
            return
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ –Ω—É–∂–Ω–∞ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
        await update_application_status(app_id, ApplicationStatusEnum.ACCEPTED, employee_id=emp.id)
        await update_application_field(app_id, "signature_confirmed", True)
        from db.crud import increment_processed_applications
        result = await increment_processed_applications(emp.id)
        logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (—Å–∫–∞–Ω—ã): app_id={app_id}, increment_result={result}")
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ {app_id} ({fio}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏.",
            reply_markup=mail_menu_keyboard()
        )
        await message.bot.send_message(
            ADMIN_CHAT_ID, 
            f"üìÆ –ü–æ—á—Ç–∞: {message.from_user.full_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ {app_id} ({fio}) (—Å–∫–∞–Ω—ã)"
        )
        await state.clear()
    else:
        # –ï—Å–ª–∏ —Å–∫–∞–Ω–æ–≤ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã
        await update_application_field(app_id, "scans_confirmed", False)
        await return_application_to_queue(app_id)
        await message.answer(
            f"‚ùó –°–∫–∞–Ω—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –ó–∞—è–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã.",
            reply_markup=mail_menu_keyboard()
        )
        await state.clear()

@router.message(MailStates.waiting_signature)
async def mail_signature_process(message: Message, state: FSMContext):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    data = await state.get_data()
    app_id = data.get("app_id")
    fio = data.get("fio")
    answer = message.text.strip().lower()
    if answer in ["–¥–∞", "–µ—Å—Ç—å", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–≥–æ—Ç–æ–≤–æ"]:
        await update_application_field(app_id, "signature_confirmed", True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω—ã –ª–∏ —Å–∫–∞–Ω—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –ª–∏ –æ–Ω–∏
        from db.crud import get_application_by_id
        app = await get_application_by_id(app_id)
        if getattr(app, 'needs_scans', False) and not getattr(app, 'scans_confirmed', False):
            await state.set_state(MailStates.waiting_scans)
            await message.answer(
                f"–¢—Ä–µ–±—É—é—Ç—Å—è —Å–∫–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –í—Å–µ —Å–∫–∞–Ω—ã –≤ –Ω–∞–ª–∏—á–∏–∏? (–¥–∞/–Ω–µ—Ç)",
                reply_markup=mail_confirm_keyboard()
            )
            return
        # –ï—Å–ª–∏ –≤—Å—ë –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º
        await update_application_status(app_id, ApplicationStatusEnum.ACCEPTED, employee_id=emp.id)
        result = await increment_processed_applications(emp.id)
        logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (–ø–æ–¥–ø–∏—Å—å): app_id={app_id}, increment_result={result}")
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ {app_id} ({fio}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –Ω–∞–ª–∏—á–∏–∏.",
            reply_markup=mail_menu_keyboard()
        )
        await message.bot.send_message(
            ADMIN_CHAT_ID, 
            f"üìÆ –ü–æ—á—Ç–∞: {message.from_user.full_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞—è–≤–ª–µ–Ω–∏–µ {app_id} ({fio}) (–ø–æ–¥–ø–∏—Å—å)"
        )
        await state.clear()
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã
        await update_application_field(app_id, "signature_confirmed", False)
        await return_application_to_queue(app_id)
        await message.answer(
            f"‚ùó –ü–æ–¥–ø–∏—Å—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ó–∞—è–≤–ª–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã.",
            reply_markup=mail_menu_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "mail_back_to_menu")
async def mail_back_to_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await mail_menu_entry(callback, state)

@router.callback_query(F.data == "mail_confirm_yes")
async def mail_confirm_yes_callback(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp or not await has_access(str(callback.from_user.id), "mail"):
        return
    data = await state.get_data()
    app_id = data.get("app_id")
    fio = data.get("fio")
    if app_id:
        await update_application_status(app_id, ApplicationStatusEnum.ACCEPTED, employee_id=emp.id)
        result = await increment_processed_applications(emp.id)
        logger.info(f"–ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ—á—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (–∫–Ω–æ–ø–∫–∞): app_id={app_id}, increment_result={result}")
        await callback.message.edit_text(
            f"‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ {app_id} ({fio}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
            reply_markup=mail_menu_keyboard()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        telegram_logger = get_logger()
        if telegram_logger:
            app = await get_application_by_id(app_id)
            if app:
                await telegram_logger.log_mail_confirmed(emp.fio, app.fio)
        
        await callback.bot.send_message(
            ADMIN_CHAT_ID,
            f"üìÆ –ü–æ—á—Ç–∞: {callback.from_user.full_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–æ–¥–ø–∏—Å—å –∑–∞—è–≤–ª–µ–Ω–∏—è {app_id} ({fio})"
        )
        await state.clear()
    else:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ.", show_alert=True)

@router.message(Command("mailinfo"))
async def mail_info_handler(message: Message):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    if not emp or not await has_access(str(message.from_user.id), "mail"):
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mailinfo <–§–ò–û>")
        return
    fio = args[1].strip()
    if not fio:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    # –ò—â–µ–º –∑–∞—è–≤–ª–µ–Ω–∏—è –ø–æ –§–ò–û –≤–æ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥—è—Ö
    queues = ["epgu_mail", "epgu", "lk", "epgu_problem", "lk_problem"]
    found = []
    for queue in queues:
        apps = await get_applications_by_fio_and_queue(fio, queue)
        found.extend(apps)
    if not found:
        await message.answer(f"–ó–∞—è–≤–ª–µ–Ω–∏—è –¥–ª—è '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.")
        return
    for app in found:
        text = f"<b>–ó–∞—è–≤–ª–µ–Ω–∏–µ</b>\n"
        text += f"–§–ò–û: {app.fio}\n"
        text += f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"ID: {app.id}\n"
        text += f"–û—á–µ—Ä–µ–¥—å: {app.queue_type}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {app.status.value if app.status else '-'}\n"
        text += f"–ü—Ä–∏—á–∏–Ω–∞: {app.status_reason or '-'}\n"
        text += f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {'–¥–∞' if app.status.value == 'accepted' else '–Ω–µ—Ç'}\n"
        text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {app.problem_comment or '-'}\n"
        text += f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {app.problem_responsible or '-'}\n"
        await message.answer(text, parse_mode="HTML")

@router.callback_query(F.data == "mail_info_fio")
async def mail_info_fio_start(callback: CallbackQuery, state: FSMContext):
    emp = await get_employee_by_tg_id(str(callback.from_user.id))
    if not emp:
        return
    await state.set_state(MailStates.waiting_fio_info)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    )

@router.message(MailStates.waiting_fio_info)
async def mail_info_fio_process(message: Message, state: FSMContext):
    emp = await get_employee_by_tg_id(str(message.from_user.id))
    if not emp:
        return
    fio = message.text.strip()
    if not fio:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –∑–∞—è–≤–∏—Ç–µ–ª—è.")
        return
    queues = ["epgu_mail", "epgu", "lk", "epgu_problem", "lk_problem"]
    found = []
    for queue in queues:
        apps = await get_applications_by_fio_and_queue(fio, queue)
        found.extend(apps)
    if not found:
        await message.answer(
            f"–ó–∞—è–≤–ª–µ–Ω–∏—è –¥–ª—è '{fio}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏.", 
            reply_markup=mail_fio_search_keyboard()
        )
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è edit_text
    text = f"<b>–ó–∞—è–≤–ª–µ–Ω–∏—è –¥–ª—è '{fio}':</b>\n\n"
    for app in found:
        text += f"<b>ID:</b> {app.id}\n"
        text += f"<b>–§–ò–û:</b> {app.fio}\n"
        text += f"<b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
        text += f"<b>–û—á–µ—Ä–µ–¥—å:</b> {app.queue_type}\n"
        text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {app.status.value if app.status else '-'}\n"
        text += f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {app.status_reason or '-'}\n"
        text += f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:</b> {'–¥–∞' if app.status.value == 'accepted' else '–Ω–µ—Ç'}\n"
        text += f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {app.problem_comment or '-'}\n"
        text += f"<b>–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:</b> {app.problem_responsible or '-'}\n"
        text += "-----------------------------\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
    text += f"\nüîç <b>–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:</b> '{fio}'\n"
    text += f"üìä <b>–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–π:</b> {len(found)}"
    
    await message.answer(text, parse_mode="HTML", reply_markup=mail_fio_search_keyboard())
    await state.clear() 
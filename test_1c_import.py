#!/usr/bin/env python3
"""
Тест функции импорта выгрузки 1С
"""

import pandas as pd
import tempfile
import os
from datetime import datetime
from utils.excel import parse_1c_applications_from_excel

def create_test_1c_file():
    """Создает тестовый файл с выгрузкой 1С"""
    
    # Тестовые данные
    data = {
        'Тип программы': ['СПО', 'СПО', 'СПО', 'СПО', 'СПО'],
        'Вид приемной кампании': ['Колледж многоуровневого профессионального образования'] * 5,
        'Иностранная квота': ['Нет'] * 5,
        'Физическое лицо': [
            'Ширгазин Илья Тагирович',
            'Шворак Ксения Владимировна', 
            'Ермоленко Диана Игоревна',
            'Крехова Ульяна Андреевна',
            'Варис Амира Асимовна'
        ],
        'Место обучения': [''] * 5,
        'Условно принято': ['Нет'] * 5,
        'Номер бюджет': ['000001487', '000001587', '000001805', '000001911', '000001917'],
        'Дата бюджет': ['20.06.2025 10:21:19', '20.06.2025 11:15:33', '24.06.2025 12:06:57', '20.06.2025 13:38:56', '20.06.2025 13:41:32'],
        'Номер договор': ['', '', '', '', '000004130'],
        'Дата договор': ['', '', '', '', '21.06.2025 11:08:13'],
        'Статус заявления в ПК': ['Принято', 'Принято', 'Отозвано', 'Принято', 'Подано'],
        'Ошибка ЕПГУ': ['Нет', 'Да', 'Нет', 'Нет', 'Нет'],
        'Есть изменения': ['Нет', 'Нет', 'Нет', 'Нет', 'Да'],
        'Отправлено на отклонение': ['Нет'] * 5,
        'Есть новые конкурсы ЕПГУ': ['Нет'] * 5,
        'Есть образование': ['Да'] * 5,
        'Образование не подтверждено': ['Нет'] * 5,
        'Новое сообщение': ['Нет'] * 5,
        'Способ подачи заявления': [
            'СМС-подтверждение пакета документов',
            'Лично (очно в Академии/филиале)',
            '',
            'СМС-подтверждение пакета документов',
            'СМС-подтверждение пакета документов'
        ],
        'Разные способы подачи конкурсных групп': ['Нет'] * 5,
        'Регистрационный номер бюджет': ['СПО000120', 'СПО000003', '', 'СПО000180', 'СПО000969'],
        'Регистрационный номер договор': ['', '', '', '', 'СПО000769Д'],
        'Регистрационный номер БВИ бюджет': [''] * 5,
        'Регистрационный номер БВИ договор': [''] * 5,
        'Регистрационный номер ОК бюджет': [''] * 5,
        'Регистрационный номер ЦО бюджет': [''] * 5,
        'Регистрационный номер ОТК бюджет': [''] * 5,
        'Регистрационный номер ИК': [''] * 5,
        'Комментарий': [''] * 5,
        'Дата первой подачи': ['20.06.2025 10:25:01', '20.06.2025 11:30:35', '20.06.2025 13:30:15', '20.06.2025 13:42:31', '20.06.2025 13:43:27'],
        'Номер': ['000001339', '000001440', '000001632', '000001690', '000001694'],
        'Заявки на изменение': ['Нет'] * 5,
        'БВИ': ['Нет'] * 5,
        'Олимпиада 100 баллов': ['Нет'] * 5,
        'Есть ИД': ['Нет'] * 5,
        'Есть преимущественные права': ['Нет'] * 5,
        'Особая квота': ['Нет'] * 5,
        'Целевая квота': ['Нет'] * 5
    }
    
    # Создаем DataFrame
    df = pd.DataFrame(data)
    
    # Создаем временный файл
    with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
        df.to_excel(tmp.name, index=False)
        return tmp.name

def test_1c_parsing():
    """Тестирует парсинг выгрузки 1С"""
    
    print("=== Тест парсинга выгрузки 1С ===")
    
    # Создаем тестовый файл
    test_file = create_test_1c_file()
    print(f"Создан тестовый файл: {test_file}")
    
    try:
        # Парсим файл
        result = parse_1c_applications_from_excel(test_file)
        
        print("\nРезультаты парсинга:")
        print(f"ЛК заявления: {len(result['lk'])}")
        print(f"ЕПГУ заявления: {len(result['epgu'])}")
        
        print("\nЛК заявления:")
        for app in result['lk']:
            print(f"  {app['fio']} - {app['status']} (приоритет: {app['is_priority']})")
        
        print("\nЕПГУ заявления:")
        for app in result['epgu']:
            print(f"  {app['fio']} - {app['status']}")
        
        # Проверяем ожидаемые результаты
        expected_lk = 3  # СМС-подтверждение заявления
        expected_epgu = 0  # Нет ЕПГУ заявлений в тестовых данных
        
        print(f"\nОжидалось ЛК: {expected_lk}, получено: {len(result['lk'])}")
        print(f"Ожидалось ЕПГУ: {expected_epgu}, получено: {len(result['epgu'])}")
        
        if len(result['lk']) == expected_lk and len(result['epgu']) == expected_epgu:
            print("✅ Тест пройден успешно!")
        else:
            print("❌ Тест не пройден!")
            
    except Exception as e:
        print(f"❌ Ошибка при тестировании: {e}")
    
    finally:
        # Удаляем временный файл
        os.unlink(test_file)
        print(f"Удален тестовый файл: {test_file}")

if __name__ == "__main__":
    test_1c_parsing() 
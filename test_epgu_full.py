#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ï–ü–ì–£
"""
import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db.crud import (
    add_employee, 
    add_group_to_employee, 
    add_application, 
    get_employee_by_tg_id,
    get_applications_by_queue_type,
    get_all_work_days_report,
    get_applications_statistics_by_queue,
    get_next_epgu_application,
    update_application_queue_type,
    postpone_application,
    start_work_day
)
from db.models import ApplicationStatusEnum
from datetime import datetime

async def test_epgu_full():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ï–ü–ì–£"""
    print("üß™ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ï–ü–ì–£...")
    
    # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    test_tg_id = "123456789"
    test_fio = "–¢–µ—Å—Ç–æ–≤—ã–π –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ï–ü–ì–£"
    
    print(f"1. –°–æ–∑–¥–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {test_fio}")
    emp = await add_employee(test_tg_id, test_fio)
    print(f"   ‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: ID={emp.id}")
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É –ï–ü–ì–£
    print("2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –ï–ü–ì–£")
    result = await add_group_to_employee(test_tg_id, "epgu")
    print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    # 3. –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    print("3. –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å")
    work_day = await start_work_day(emp.id)
    print(f"   ‚úÖ –†–∞–±–æ—á–∏–π –¥–µ–Ω—å: {work_day.id if work_day else '–Ω–µ —Å–æ–∑–¥–∞–Ω'}")
    
    # 4. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å –ï–ü–ì–£
    print("4. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è")
    test_applications = [
        {"fio": "–ò–≤–∞–Ω–æ–≤ –ò.–ò.", "submitted_at": datetime.now() - timedelta(hours=2)},
        {"fio": "–ü–µ—Ç—Ä–æ–≤ –ü.–ü.", "submitted_at": datetime.now() - timedelta(hours=1)},
        {"fio": "–°–∏–¥–æ—Ä–æ–≤ –°.–°.", "submitted_at": datetime.now()},
    ]
    
    for app_data in test_applications:
        app = await add_application(
            fio=app_data["fio"],
            submitted_at=app_data["submitted_at"],
            queue_type="epgu"
        )
        print(f"   ‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {app.fio} (ID={app.id})")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
    print("5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –ï–ü–ì–£")
    apps = await get_applications_by_queue_type("epgu")
    print(f"   üìã –ó–∞—è–≤–ª–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(apps)}")
    for app in apps:
        print(f"      - {app.fio} (—Å—Ç–∞—Ç—É—Å: {app.status.value})")
    
    # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è
    print("6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è")
    next_app = await get_next_epgu_application(employee_id=emp.id)
    if next_app:
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ: {next_app.fio} (ID={next_app.id})")
        app_id = next_app.id
    else:
        print("   ‚ùå –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
        return
    
    # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º
    print("7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º")
    
    # 7.1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥–ø–∏—Å—å
    print("   7.1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–¥–ø–∏—Å—å")
    await update_application_queue_type(app_id, "epgu_mail", employee_id=emp.id)
    print("   ‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–æ–¥–ø–∏—Å—å")
    
    # 7.2. –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –µ–≥–æ
    print("   7.2. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è")
    app2 = await add_application(
        fio="–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –ò.–ò.",
        submitted_at=datetime.now(),
        queue_type="epgu"
    )
    next_app2 = await get_next_epgu_application(employee_id=emp.id)
    if next_app2:
        await postpone_application(next_app2.id, employee_id=emp.id)
        print(f"   ‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ {next_app2.fio} –æ—Ç–ª–æ–∂–µ–Ω–æ –Ω–∞ —Å—É—Ç–∫–∏")
    
    # 7.3. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ
    print("   7.3. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ")
    app3 = await add_application(
        fio="–ü—Ä–æ–±–ª–µ–º–Ω—ã–π –ò.–ò.",
        submitted_at=datetime.now(),
        queue_type="epgu"
    )
    next_app3 = await get_next_epgu_application(employee_id=emp.id)
    if next_app3:
        await update_application_queue_type(next_app3.id, "epgu_problem", employee_id=emp.id, reason="–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
        print(f"   ‚úÖ –ó–∞—è–≤–ª–µ–Ω–∏–µ {next_app3.fio} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ")
    
    # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—á–µ—Ä–µ–¥—è–º
    print("8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—á–µ—Ä–µ–¥—è–º")
    queue_stats = await get_applications_statistics_by_queue()
    print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {queue_stats}")
    
    # 9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã
    print("9. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã")
    reports = await get_all_work_days_report()
    print(f"   üìà –û—Ç—á–µ—Ç–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(reports)}")
    for report in reports:
        print(f"      - {report['employee_fio']}: {report['applications_processed']} –∑–∞—è–≤–ª–µ–Ω–∏–π")
    
    # 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö
    print("10. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö")
    for queue_type in ['epgu', 'epgu_mail', 'epgu_problem']:
        apps = await get_applications_by_queue_type(queue_type)
        print(f"   üìã {queue_type}: {len(apps)} –∑–∞—è–≤–ª–µ–Ω–∏–π")
        for app in apps:
            print(f"      - {app.fio} (–æ–±—Ä–∞–±–æ—Ç–∞–ª: {app.processed_by.fio if app.processed_by else '–Ω–µ—Ç'})")
    
    print("\n‚úÖ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –ï–ü–ì–£ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    asyncio.run(test_epgu_full()) 
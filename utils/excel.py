import pandas as pd
from datetime import datetime

def parse_lk_applications_from_excel(file_path: str):
    df = pd.read_excel(file_path)
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered = []
    seen_fio = set()
    for _, row in df.iterrows():
        fio = str(row["–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"]).strip()
        status = str(row["–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –ü–ö"]).strip().lower()
        changes = str(row["–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"]).strip().lower()
        date_str = str(row["–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏"]).strip()
        try:
            submitted_at = datetime.strptime(date_str, "%d.%m.%Y %H:%M:%S")
        except Exception:
            try:
                submitted_at = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
            except Exception:
                continue
        if fio in seen_fio:
            continue
        if status == "–ø–æ–¥–∞–Ω–æ":
            filtered.append({"fio": fio, "submitted_at": submitted_at, "priority": False})
            seen_fio.add(fio)
        elif status == "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏" and changes == "–¥–∞":
            filtered.append({"fio": fio, "submitted_at": submitted_at, "priority": True})
            seen_fio.add(fio)
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ priority=True, –ø–æ—Ç–æ–º False, –≤–Ω—É—Ç—Ä–∏ ‚Äî –ø–æ –¥–∞—Ç–µ
    filtered.sort(key=lambda x: (not x["priority"], x["submitted_at"]))
    return filtered

def parse_epgu_applications_from_excel(file_path: str):
    print("=== –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è parse_epgu_applications_from_excel ===")
    df = pd.read_excel(file_path)
    print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ: {list(df.columns)}")
    filtered = []
    seen = set()
    fio_column = None
    date_column = None
    for col in df.columns:
        col_lower = str(col).lower()
        if any(word in col_lower for word in ['—Ñ–∏–æ', '–∑–∞—è–≤–∏—Ç–µ–ª—å', '—Ñ–∏–∑', '–ª–∏—Ü–æ']):
            fio_column = col
        elif any(word in col_lower for word in ['–¥–∞—Ç–∞', '–ø–æ–¥–∞—á']):
            date_column = col
    if not fio_column and len(df.columns) > 0:
        fio_column = df.columns[0]
    if not date_column and len(df.columns) > 1:
        date_column = df.columns[1]
    for _, row in df.iterrows():
        fio = str(row[fio_column]).strip() if fio_column else None
        date_str = str(row[date_column]).strip() if date_column else None
        if not fio or fio == 'nan' or not date_str or date_str == 'nan':
            continue
        try:
            submitted_at = datetime.strptime(date_str, "%d.%m.%Y %H:%M:%S")
        except Exception:
            try:
                submitted_at = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
            except Exception:
                try:
                    submitted_at = datetime.strptime(date_str, "%d.%m.%Y")
                except Exception:
                    continue
        key = (fio, submitted_at)
        if key in seen:
            continue
        filtered.append({"fio": fio, "submitted_at": submitted_at})
        seen.add(key)
    filtered.sort(key=lambda x: x["submitted_at"])
    print(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {len(filtered)}")
    return filtered

async def parse_1c_applications_from_excel(file_path: str, progress_callback=None, existing_fios_by_queue=None):
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–≥—Ä—É–∑–∫–∏ –∏–∑ 1–° –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–ª–µ–Ω–∏–π –õ–ö –∏ –ï–ü–ì–£
    existing_fios_by_queue: dict[str, set[str]] ‚Äî –§–ò–û, —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –∫–∞–∂–¥–æ–π –æ—á–µ—Ä–µ–¥–∏
    """
    print("=== –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è parse_1c_applications_from_excel ===")
    df = pd.read_excel(file_path)
    print(f"–ö–æ–ª–æ–Ω–∫–∏ –≤ —Ñ–∞–π–ª–µ: {list(df.columns)}")
    print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {len(df)}")
    
    lk_applications = []
    epgu_applications = []
    unknown_applications = []
    
    processed_count = 0
    if existing_fios_by_queue is None:
        existing_fios_by_queue = {}
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –§–ò–û –∏–∑ "–ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö" –∏ –ø–æ—á—Ç–æ–≤—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤ –æ–¥–∏–Ω set
    skip_fios = set()
    for q in ["lk_problem", "epgu_mail", "epgu_problem", "epgu", "lk"]:
        skip_fios.update(existing_fios_by_queue.get(q, set()))
    
    for _, row in df.iterrows():
        processed_count += 1
        if processed_count % 150 == 0:
            progress_text = f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {processed_count}/{len(df)}"
            print(progress_text)
            if progress_callback:
                try:
                    await progress_callback(progress_text)
                except:
                    pass
        fio = str(row["–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ"]).strip()
        submission_method = str(row["–°–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–ª–µ–Ω–∏—è"]).strip()
        status = str(row["–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–ª–µ–Ω–∏—è –≤ –ü–ö"]).strip()
        has_changes = str(row["–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"]).strip().lower()
        date_str = str(row["–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏"]).strip()
        if not fio or fio == 'nan' or not date_str or date_str == 'nan':
            continue
        # –ï—Å–ª–∏ –§–ò–û —É–∂–µ –µ—Å—Ç—å –≤ –æ–¥–Ω–æ–π –∏–∑ "–æ—Å–æ–±—ã—Ö" –æ—á–µ—Ä–µ–¥–µ–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if fio in skip_fios:
            continue
        try:
            submitted_at = datetime.strptime(date_str, "%d.%m.%Y %H:%M:%S")
        except Exception:
            try:
                submitted_at = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
            except Exception:
                try:
                    submitted_at = datetime.strptime(date_str, "%d.%m.%Y")
                except Exception:
                    continue
        queue_type = None
        app_status = None
        is_priority = False
        status_reason = None
        # –õ–ö (–°–ú–°-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        if "–°–ú–°-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ" in submission_method:
            queue_type = "lk"
            if status.lower() == "–ø—Ä–∏–Ω—è—Ç–æ":
                app_status = "accepted"
            elif status.lower() == "–ø–æ–¥–∞–Ω–æ":
                app_status = "queued"
            elif status.lower() == "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏":
                if has_changes == "–¥–∞":
                    app_status = "queued"
                    is_priority = True
                else:
                    app_status = "rejected"
                    status_reason = "–∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            elif status.lower() == "—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è":
                continue
            else:
                continue
        # –ï–ü–ì–£
        elif "–ï–ü–ì–£" in submission_method:
            queue_type = "epgu"
            if status.lower() == "–ø—Ä–∏–Ω—è—Ç–æ":
                app_status = "accepted"
            elif status.lower() == "–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏":
                app_status = "queued"
            else:
                continue
        # –ü—É—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏
        elif submission_method == "" and status.lower() == "–ø–æ–¥–∞–Ω–æ":
            queue_type = "lk"
            app_status = "queued"
        # –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
        else:
            queue_type = "unknown"
            app_status = "queued"
            status_reason = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏: '{submission_method}'"
        application = {
            "fio": fio,
            "submitted_at": submitted_at,
            "queue_type": queue_type,
            "status": app_status,
            "is_priority": is_priority,
            "status_reason": status_reason
        }
        if queue_type == "lk":
            lk_applications.append(application)
        elif queue_type == "epgu":
            epgu_applications.append(application)
        elif queue_type == "unknown":
            unknown_applications.append(application)
    lk_applications.sort(key=lambda x: (not x["is_priority"], x["submitted_at"]))
    epgu_applications.sort(key=lambda x: x["submitted_at"])
    unknown_applications.sort(key=lambda x: x["submitted_at"])
    final_text = f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {processed_count}"
    print(final_text)
    if progress_callback:
        try:
            await progress_callback(final_text)
        except:
            pass
    print(f"–ù–∞–π–¥–µ–Ω–æ –õ–ö –∑–∞—è–≤–ª–µ–Ω–∏–π: {len(lk_applications)}")
    print(f"–ù–∞–π–¥–µ–Ω–æ –ï–ü–ì–£ –∑–∞—è–≤–ª–µ–Ω–∏–π: {len(epgu_applications)}")
    print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–ª–µ–Ω–∏–π —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–¥–∞—á–∏: {len(unknown_applications)}")
    return {
        "lk": lk_applications,
        "epgu": epgu_applications,
        "unknown": unknown_applications
    }

def parse_epgu_mail_applications_from_excel(file_path: str):
    """
    –ü–∞—Ä—Å–∏—Ç excel-—Ñ–∞–π–ª –æ—á–µ—Ä–µ–¥–∏ –ï–ü–ì–£ –ø–æ—á—Ç–∞ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ N, –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ, Email
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å fio –∏ email
    """
    df = pd.read_excel(file_path)
    filtered = []
    for _, row in df.iterrows():
        fio = str(row.get("–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ", "")).strip()
        email = str(row.get("Email", "")).strip()
        if fio and email and email != 'nan':
            filtered.append({"fio": fio, "email": email})
    return filtered 
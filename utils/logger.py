import logging
from typing import Optional, Dict, Any
from aiogram import Bot
from config import GENERAL_CHAT_ID, ADMIN_LOG_CHAT_ID, THREAD_IDS
import traceback
from datetime import datetime

class TelegramLogger:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.general_chat_id = GENERAL_CHAT_ID
        self.admin_chat_id = ADMIN_LOG_CHAT_ID
        self.thread_ids = THREAD_IDS
    
    async def log_to_thread(self, thread_name: str, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–¥ –æ–±—â–µ–≥–æ —á–∞—Ç–∞"""
        if not self.general_chat_id or not self.thread_ids.get(thread_name):
            return False
        
        try:
            thread_id = self.thread_ids[thread_name]
            await self.bot.send_message(
                chat_id=self.general_chat_id,
                text=message,
                message_thread_id=thread_id,
                parse_mode=parse_mode
            )
            return True
        except Exception as e:
            await self.log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç—Ä–µ–¥ {thread_name}: {e}")
            return False
    
    async def log_to_admin(self, message: str, parse_mode: str = "HTML") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç"""
        if not self.admin_chat_id:
            return False
        
        try:
            await self.bot.send_message(
                chat_id=self.admin_chat_id,
                text=message,
                parse_mode=parse_mode
            )
            return True
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç, –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {e}")
            return False
    
    async def log_error(self, error_message: str, exception: Optional[Exception] = None) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"üö® <b>–û–®–ò–ë–ö–ê</b> [{timestamp}]\n\n{error_message}"
        
        if exception:
            message += f"\n\n<code>{traceback.format_exc()}</code>"
        
        return await self.log_to_admin(message)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–∏—Ö —Å–æ–±—ã—Ç–∏–π
    async def log_work_time_start(self, employee_name: str, time: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
        message = f"üü¢ <b>–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è</b>\nüë§ {employee_name}\n‚è∞ {time}"
        return await self.log_to_thread("work_time", message)
    
    async def log_work_time_end(self, employee_name: str, time: str, total_time: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è"""
        message = f"üî¥ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è</b>\nüë§ {employee_name}\n‚è∞ {time}\n‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time}"
        return await self.log_to_thread("work_time", message)
    
    async def log_break_start(self, employee_name: str, time: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ä—ã–≤–∞"""
        message = f"‚òï <b>–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ä—ã–≤–∞</b>\nüë§ {employee_name}\n‚è∞ {time}"
        return await self.log_to_thread("work_time", message)
    
    async def log_break_end(self, employee_name: str, time: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞"""
        message = f"‚úÖ <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞</b>\nüë§ {employee_name}\n‚è∞ {time}"
        return await self.log_to_thread("work_time", message)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –õ–ö
    async def log_lk_accepted(self, employee_name: str, app_id: int, fio: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –õ–ö"""
        message = f"‚úÖ <b>–õ–ö: –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>\nüë§ {employee_name}\nüìã ID: {app_id}\nüë®‚Äçüíº {fio}"
        return await self.log_to_thread("lk_processing", message)
    
    async def log_lk_rejected(self, employee_name: str, app_id: int, fio: str, reason: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –õ–ö"""
        message = f"‚ùå <b>–õ–ö: –ó–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\nüë§ {employee_name}\nüìã ID: {app_id}\nüë®‚Äçüíº {fio}\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        return await self.log_to_thread("lk_processing", message)
    
    async def log_lk_problem(self, employee_name: str, app_id: int, fio: str, reason: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –õ–ö"""
        message = f"‚ö†Ô∏è <b>–õ–ö: –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ</b>\nüë§ {employee_name}\nüìã ID: {app_id}\nüë®‚Äçüíº {fio}\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        return await self.log_to_thread("lk_problem", message)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ï–ü–ì–£
    async def log_epgu_accepted(self, employee_name: str, app_id: int, fio: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –ï–ü–ì–£"""
        message = f"‚úÖ <b>–ï–ü–ì–£: –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>\nüë§ {employee_name}\nüìã ID: {app_id}\nüë®‚Äçüíº {fio}"
        return await self.log_to_thread("epgu_accepted", message)
    
    async def log_epgu_mail_queue(self, employee_name: str, app_id: int, fio: str, action: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã –ï–ü–ì–£"""
        message = f"üìÆ <b>–ï–ü–ì–£: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ—á—Ç—ã</b>\nüë§ {employee_name}\nüìã ID: {app_id}\nüë®‚Äçüíº {fio}\nüìù –î–µ–π—Å—Ç–≤–∏–µ: {action}"
        return await self.log_to_thread("epgu_mail_queue", message)
    
    async def log_epgu_problem(self, employee_name: str, app_id: int, fio: str, reason: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –ï–ü–ì–£"""
        message = f"‚ö†Ô∏è <b>–ï–ü–ì–£: –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ</b>\nüë§ {employee_name}\nüìã ID: {app_id}\nüë®‚Äçüíº {fio}\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        return await self.log_to_thread("epgu_problem", message)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—á—Ç—ã
    async def log_mail_confirmed(self, employee_name: str, fio: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã"""
        message = f"‚úÖ <b>–ü–æ—á—Ç–∞: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</b>\nüë§ {employee_name}\nüë®‚Äçüíº {fio}"
        return await self.log_to_thread("mail_confirmed", message)
    
    async def log_mail_rejected(self, employee_name: str, fio: str, reason: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ—á—Ç—ã"""
        message = f"‚ùå <b>–ü–æ—á—Ç–∞: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\nüë§ {employee_name}\nüë®‚Äçüíº {fio}\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        return await self.log_to_thread("mail_rejected", message)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–±–æ—Ä–∞ –ø—Ä–æ–±–ª–µ–º
    async def log_problem_solved(self, employee_name: str, app_id: int, fio: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        message = f"‚úÖ <b>–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\nüë§ {employee_name}\nüìã ID: {app_id}\nüë®‚Äçüíº {fio}"
        return await self.log_to_thread("problem_solved", message)
    
    async def log_problem_solved_queue(self, employee_name: str, app_id: int, fio: str, queue_type: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å"""
        queue_name = {
            'lk': '–õ–ö',
            'epgu': '–ï–ü–ì–£',
            'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)'
        }.get(queue_type, queue_type)
        message = f"üîÑ <b>–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å</b>\nüë§ {employee_name}\nüìã ID: {app_id}\nüë®‚Äçüíº {fio}\nüìã –û—á–µ—Ä–µ–¥—å: {queue_name}"
        return await self.log_to_thread("problem_solved_queue", message)
    
    async def log_problem_in_progress(self, employee_name: str, app_id: int, fio: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        message = f"üîÑ <b>–†–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º: –ü—Ä–æ—Ü–µ—Å—Å —Ä–µ—à–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω</b>\nüë§ {employee_name}\nüìã ID: {app_id}\nüë®‚Äçüíº {fio}"
        return await self.log_to_thread("problem_in_progress", message)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π
    async def log_queue_updated(self, queue_type: str, employee_name: str, count: int) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏"""
        queue_name = {
            'lk': '–õ–ö',
            'epgu': '–ï–ü–ì–£',
            'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
            'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
        }.get(queue_type, queue_type)
        message = f"üìä <b>–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–ª–µ–Ω–∏–π</b>\nüìã –û—á–µ—Ä–µ–¥—å: {queue_name}\nüë§ –ö–µ–º: {employee_name}\n‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ: {count}"
        return await self.log_to_thread("queue_updated", message)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Å–∫–∞–ª–∞—Ü–∏–∏
    async def log_escalation(self, app_id: int, queue_type: str, employee_name: str, reason: str) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —ç—Å–∫–∞–ª–∞—Ü–∏—é"""
        queue_name = {
            'lk': '–õ–ö',
            'epgu': '–ï–ü–ì–£',
            'epgu_mail': '–ï–ü–ì–£ (–ø–æ—á—Ç–∞)',
            'epgu_problem': '–ï–ü–ì–£ (–ø—Ä–æ–±–ª–µ–º—ã)'
        }.get(queue_type, queue_type)
        message = f"üö® <b>–≠—Å–∫–∞–ª–∞—Ü–∏—è</b>\nüìã ID –∑–∞—è–≤–ª–µ–Ω–∏—è: {app_id}\nüìã –û—á–µ—Ä–µ–¥—å: {queue_name}\nüë§ –ö–µ–º: {employee_name}\nüìù –ü—Ä–∏—á–∏–Ω–∞: {reason}"
        return await self.log_to_thread("escalation", message)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
telegram_logger: Optional[TelegramLogger] = None

def init_logger(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä"""
    global telegram_logger
    telegram_logger = TelegramLogger(bot)

def get_logger() -> Optional[TelegramLogger]:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä"""
    return telegram_logger 